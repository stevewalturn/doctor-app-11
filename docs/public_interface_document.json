{
  "package_name": "com.walturn.my_app",
  "project_description": "The Flutter application is a healthcare management system that allows patients to book appointments, view their consultation history, and healthcare providers to manage patient consultations. The key features include patient management, consultation management, and a consultation form for recording patient symptoms, diagnosis, prescription, and additional notes.",
  "architecture_overview": "The application is structured using the Stacked architecture, which separates the concerns of the UI, view models, and services. The main components include the App, AppView, various feature-specific views and view models (e.g., PatientsView, PatientDetailsView, ConsultationView), and services for managing patients, consultations, and navigation. The application also uses a ScreenObserver to track screen transitions for analytics purposes.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/l10n/localizations_extension.dart",
      "description": "This Dart file provides an extension on the BuildContext class to make it easier to access the current AppLocalizations instance, which is responsible for managing the application's localization and internationalization.",
      "class_diagram": "",
      "methods": [
        {
          "name": "localizations",
          "description": "Retrieves the current AppLocalizations instance for the given BuildContext.",
          "parameters": null,
          "return_type": "AppLocalizations"
        }
      ],
      "dependencies": [
        "flutter/widgets.dart",
        "flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This file is responsible for managing the bottom sheet UI in the Flutter application. It sets up the custom bottom sheet builders for different types of bottom sheets, allowing the application to display various types of bottom sheets as needed.",
      "class_diagram": "@startuml\n\nclass BottomSheetService {\n  + setCustomSheetBuilders(builders: Map<BottomSheetType, SheetBuilder>)\n}\n\nclass BottomSheetType {\n  + notice\n}\n\ninterface SheetBuilder {\n  + (context: BuildContext, request: SheetRequest, completer: SheetCompleter)\n}\n\nclass NoticeSheet {\n  + (request: SheetRequest, completer: SheetCompleter)\n}\n\nBottomSheetService --> BottomSheetType\nBottomSheetService --> SheetBuilder\nNoticeSheet .> SheetBuilder\n\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "Sets up the custom bottom sheet builders for different types of bottom sheets, allowing the application to display various types of bottom sheets as needed.",
          "parameters": [
            "None"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/l10n/supported_locales.dart",
      "description": "This Dart file is responsible for managing the supported locales and localization delegates for the Flutter application. It provides a centralized and reusable way to handle the internationalization (i18n) and localization (l10n) of the app.",
      "class_diagram": "",
      "methods": [
        {
          "name": "localizationsDelegates",
          "description": "Returns a list of localization delegates that provide the translation and formatting logic for the application's strings.",
          "parameters": null,
          "return_type": "List<LocalizationsDelegate<dynamic>>"
        },
        {
          "name": "supportedLocales",
          "description": "Returns a list of locales that the application supports for translation and formatting.",
          "parameters": null,
          "return_type": "List<Locale>"
        }
      ],
      "dependencies": [
        "flutter/widgets.dart",
        "flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This file is responsible for managing the navigation and routing within the Flutter application. It defines the available routes, the corresponding views, and provides utility methods to navigate between these views.",
      "class_diagram": "@startuml\nclass Routes {\n  +static const homeView: String\n  +static const startupView: String\n  +static const all: Set<String>\n}\n\nclass StackedRouter extends RouterBase {\n  +List<RouteDef> get routes()\n  +Map<Type, StackedRouteFactory> get pagesMap()\n}\n\nclass NavigatorStateExtension on NavigationService {\n  +Future<dynamic> navigateToHomeView(...)\n  +Future<dynamic> navigateToStartupView(...)\n  +Future<dynamic> replaceWithHomeView(...)\n  +Future<dynamic> replaceWithStartupView(...)\n}\n@enduml",
      "methods": [
        {
          "name": "navigateToHomeView",
          "description": "Navigates to the HomeView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToStartupView",
          "description": "Navigates to the StartupView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithHomeView",
          "description": "Replaces the current route with the HomeView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithStartupView",
          "description": "Replaces the current route with the StartupView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/views/home/home_view.dart",
        "package:my_app/ui/views/startup/startup_view.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main/bootstrap.dart",
      "description": "This file is responsible for bootstrapping the Flutter application, setting up the necessary dependencies, and running the main app widget. It serves as the entry point for the application, ensuring a consistent initialization process across different app flavors.",
      "class_diagram": "",
      "methods": [
        {
          "name": "bootstrap",
          "description": "This is the main entry point function that initializes the application. It sets up the app's flavor, ensures the WidgetsFlutterBinding is initialized, and configures the app's orientation, locator, dialog UI, and bottom sheet UI. Finally, it runs the main app widget provided by the caller.",
          "parameters": [
            "builder",
            "flavor"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/utils/flavors/flavors.dart"
      ]
    },
    {
      "name": "lib/main/main_production.dart",
      "description": "This file is responsible for bootstrapping the production version of the application. It sets up the initial state and configuration for the app, ensuring it runs in the production environment.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main",
          "description": "The entry point of the application. It calls the `bootstrap` function to initialize the app and render the `AppView`.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/main/bootstrap.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/main/main_development.dart",
      "description": "This Dart file is responsible for bootstrapping the development version of the Flutter application. It sets up the application's entry point and configures the application flavor to be 'development'.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main",
          "description": "The main entry point of the application that initializes the development build of the app.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/main/bootstrap.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/models/enums/flavor.dart",
      "description": "This file defines an enum called `Flavor` with two values: `production` and `development`. It represents the different flavors or environments that the application can run in.",
      "class_diagram": "@startuml\nenum Flavor {\n  production\n  development\n}\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/services/analytic_service.dart",
      "description": "The AnalyticService class is a wrapper for analytics functionality in the application. It encapsulates the implementation of analytics tracking and provides a centralized interface for managing analytics-related operations.",
      "class_diagram": "@startuml\nclass AnalyticService {\n  + init(): Future<void>\n}\n@enduml",
      "methods": [
        {
          "name": "init",
          "description": "Initializes the AnalyticService, preparing it for use.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:stacked/stacked_annotations.dart"
      ]
    },
    {
      "name": "lib/observer/screen_observer.dart",
      "description": "The ScreenObserver class is responsible for tracking the screen views of the application using the AnalyticService. It is a NavigatorObserver that listens for navigation events and logs screen transitions to the analytics service.",
      "class_diagram": "@startuml\nclass ScreenObserver extends NavigatorObserver {\n  + ScreenObserver()\n  + void didPush(Route<dynamic> route, Route<dynamic>? previousRoute)\n  + void didReplace({Route<dynamic>? newRoute, Route<dynamic>? oldRoute})\n  + void didPop(Route<dynamic> route, Route<dynamic>? previousRoute)\n  - void _trackScreenView(Route<dynamic> route)\n}\n\nAnalyticService --* ScreenObserver\n@enduml",
      "methods": [
        {
          "name": "didPush",
          "description": "Tracks the screen view when a new route is pushed onto the navigation stack.",
          "parameters": [
            "Route<dynamic> route",
            "Route<dynamic>? previousRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "didReplace",
          "description": "Tracks the screen view when a route is replaced in the navigation stack.",
          "parameters": [
            "Route<dynamic>? newRoute",
            "Route<dynamic>? oldRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "didPop",
          "description": "Tracks the screen view when a route is popped from the navigation stack.",
          "parameters": [
            "Route<dynamic> route",
            "Route<dynamic>? previousRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "_trackScreenView",
          "description": "Logs the screen view to the AnalyticService based on the current route.",
          "parameters": [
            "Route<dynamic> route"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "my_app/services/analytic_service.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This Dart file defines a set of reusable color constants that represent the primary color palette of the application. These colors are used throughout the UI to ensure a consistent and branded visual experience.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "The NoticeSheetModel class is responsible for managing the state and behavior of the notice bottom sheet UI component in the application. It provides the core functionality and business logic for displaying and interacting with the notice sheet.",
      "class_diagram": "@startuml\nclass NoticeSheetModel {\n  +showNotice()\n  +dismissNotice()\n  +isLoading : bool\n  +noticeMessage : String\n}\n@enduml",
      "methods": [
        {
          "name": "showNotice",
          "description": "Displays the notice bottom sheet with the specified message.",
          "parameters": [
            "message"
          ],
          "return_type": "void"
        },
        {
          "name": "dismissNotice",
          "description": "Dismisses the currently displayed notice bottom sheet.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This Dart file provides a collection of common UI helper functions and constants that are used throughout the Flutter application's user interface. It serves as a centralized location for managing and accessing various UI-related utilities, ensuring consistency and reusability across the codebase.",
      "class_diagram": "@startuml\nclass UIHelpers {\n  + const horizontalSpaceTiny: Widget\n  + const horizontalSpaceSmall: Widget\n  + const horizontalSpaceMedium: Widget\n  + const horizontalSpaceLarge: Widget\n  + const verticalSpaceTiny: Widget\n  + const verticalSpaceSmall: Widget\n  + const verticalSpaceMedium: Widget\n  + const verticalSpaceLarge: Widget\n  + const verticalSpaceMassive: Widget\n  + const spacedDivider: Widget\n  + verticalSpace(height: double): Widget\n  + screenWidth(context: BuildContext): double\n  + screenHeight(context: BuildContext): double\n  + screenHeightFraction(context: BuildContext, dividedBy: int, offsetBy: double, max: double): double\n  + screenWidthFraction(context: BuildContext, dividedBy: int, offsetBy: double, max: double): double\n  + halfScreenWidth(context: BuildContext): double\n  + thirdScreenWidth(context: BuildContext): double\n  + quarterScreenWidth(context: BuildContext): double\n  + getResponsiveHorizontalSpaceMedium(context: BuildContext): double\n  + getResponsiveSmallFontSize(context: BuildContext): double\n  + getResponsiveMediumFontSize(context: BuildContext): double\n  + getResponsiveLargeFontSize(context: BuildContext): double\n  + getResponsiveExtraLargeFontSize(context: BuildContext): double\n  + getResponsiveMassiveFontSize(context: BuildContext): double\n  + getResponsiveFontSize(context: BuildContext, fontSize: double, max: double): double\n}\n@enduml",
      "methods": [
        {
          "name": "horizontalSpaceTiny",
          "description": "A constant Widget that provides a tiny horizontal space.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "verticalSpace",
          "description": "A function that creates a Widget with a specified vertical space.",
          "parameters": [
            "height"
          ],
          "return_type": "Widget"
        },
        {
          "name": "screenWidth",
          "description": "A function that returns the width of the screen.",
          "parameters": [
            "context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "A function that calculates a responsive font size based on the screen width.",
          "parameters": [
            "context",
            "fontSize",
            "max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "The NoticeSheet class is responsible for displaying a bottom sheet with a notice or alert message to the user. It is part of the UI layer of the application and is used to present important information or updates to the user in a modal dialog.",
      "class_diagram": "@startuml\n  class NoticeSheet {\n    + NoticeSheet({required this.completer, required this.request})\n    + Widget builder(BuildContext context, NoticeSheetModel viewModel, Widget? child)\n    + NoticeSheetModel viewModelBuilder(BuildContext context)\n  }\n\n  class NoticeSheetModel {\n    # NoticeSheetModel()\n  }\n\n  NoticeSheet --> NoticeSheetModel\n  @enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI of the NoticeSheet, which includes the title, description, and any other relevant content.",
          "parameters": [
            "BuildContext context",
            "NoticeSheetModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the NoticeSheetModel, which is used to manage the state and logic of the NoticeSheet.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This Dart file contains the `InfoAlertDialogModel` class, which is responsible for managing the state and behavior of an information alert dialog in a Flutter application.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel {\n}\nInfoAlertDialogModel -[hidden]- BaseViewModel\n@enduml",
      "methods": [
        {
          "name": "InfoAlertDialogModel",
          "description": "The constructor for the `InfoAlertDialogModel` class.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/app/app_viewmodel.dart",
      "description": "The AppViewModel class is responsible for managing the state and behavior of the main application view in a Flutter application. It serves as the ViewModel component in the Model-View-ViewModel (MVVM) architecture, which separates the presentation logic from the business logic.",
      "class_diagram": "@startuml\nclass AppViewModel extends BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_view.dart",
      "description": "The `HomeView` class is responsible for rendering the main UI of the application's home screen. It provides a simple interface for displaying a counter value and allowing the user to interact with the screen by incrementing the counter, showing a dialog, or displaying a bottom sheet.",
      "class_diagram": "@startuml\nclass HomeView {\n  +builder(BuildContext, HomeViewModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): HomeViewModel\n}\n\nclass HomeViewModel {\n  +incrementCounter(): void\n  +showDialog(): void\n  +showBottomSheet(): void\n  +counterLabel: String\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI of the home screen, including the counter display, increment button, dialog button, and bottom sheet button.",
          "parameters": [
            "BuildContext",
            "HomeViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the `HomeViewModel` to be used by the `HomeView`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "HomeViewModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "gap/gap.dart",
        "my_app/ui/views/home/home_viewmodel.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_viewmodel.dart",
      "description": "The HomeViewModel class is responsible for managing the state and behavior of the home screen in the application. It provides the core functionality for handling the counter value and displaying it, as well as providing methods to show a custom dialog and a bottom sheet.",
      "class_diagram": "@startuml\nclass HomeViewModel {\n  - _dialogService: DialogService\n  - _bottomSheetService: BottomSheetService\n  - _counter: int\n  + counterLabel: String\n  + incrementCounter(): void\n  + showDialog(): void\n  + showBottomSheet(): void\n}\n@enduml",
      "methods": [
        {
          "name": "counterLabel",
          "description": "Returns a string representation of the current counter value.",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "incrementCounter",
          "description": "Increments the counter value and rebuilds the UI.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Displays a custom dialog with a title and description.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Displays a custom bottom sheet with a title and description.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.bottomsheets.dart",
        "my_app/app/app.dialogs.dart",
        "my_app/app/app.locator.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_view.dart",
      "description": "The `StartupView` class in this file is responsible for the initial startup screen of the application. It is the main entry point for the user when they launch the app, displaying the app's logo and a loading indicator while the app's startup logic is being executed.",
      "class_diagram": "@startuml\nclass StartupView {\n  + builder(BuildContext, StartupViewModel, Widget?): Widget\n  + viewModelBuilder(BuildContext): StartupViewModel\n  + onViewModelReady(StartupViewModel): void\n}\n\nclass StartupViewModel {\n  + runStartupLogic(): void\n}\n\nStartupView --> StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the startup screen, displaying the app's logo and a loading indicator.",
          "parameters": [
            "BuildContext",
            "StartupViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the `StartupViewModel` to be used by the `StartupView`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "StartupViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Called when the `StartupViewModel` is ready, triggering the execution of the app's startup logic.",
          "parameters": [
            "StartupViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "flutter/scheduler.dart",
        "gap/gap.dart",
        "my_app/ui/views/startup/startup_viewmodel.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_viewmodel.dart",
      "description": "The StartupViewModel class is responsible for handling the initial startup logic of the application. It is responsible for delaying the application launch by a few seconds and then navigating to the home view, which is the main entry point of the application.",
      "class_diagram": "@startuml\n  class StartupViewModel {\n    -_navigationService : NavigationService\n    +runStartupLogic() : Future\n  }\n  @enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "This method is responsible for the core startup logic of the application. It delays the application launch by 3 seconds and then navigates to the home view using the NavigationService.",
          "parameters": [
            "None"
          ],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/app/app.router.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/config/production/firebase_options_production.dart",
      "description": "This file defines the Firebase configuration options for the production environment of the application. It is responsible for providing the necessary Firebase-related settings and credentials to integrate the application with the Firebase services in the production environment.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:firebase_core/firebase_core.dart",
        "lib/config/firebase_options.dart"
      ]
    },
    {
      "name": "lib/utils/const/const.dart",
      "description": "This file contains a set of constant values and data structures that are used throughout the application. It serves as a centralized repository for global configuration and settings, providing a consistent and easily accessible way to manage application-wide constants.",
      "class_diagram": "@startuml\n' Enumerations and Constants\npublicConstant totalOnboarding : int\npublicConstant onBoardingHeaderTag : String\npublicConstant pathCompliantStatement : String\npublicConstant pathTermsOfServices : String\npublicConstant defaultContactEmail : String\npublicConstant defaultContactPhone : String\npublicConstant introYoutubeId : String\npublicConstant defaultLanguagesList : List<Map<String, String>>\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/utils/contact/contact_util.dart",
      "description": "The `ContactUtil` class provides utility functions for launching WhatsApp and email communication from a Flutter application. It handles the platform-specific logic to open the appropriate communication channels for the user's device.",
      "class_diagram": "@startuml\nclass ContactUtil {\n  +static Future<void> launchWhatsApp(String phone, {String text = ''})\n  +static Future<void> launchEmail(String email)\n}\n@enduml",
      "methods": [
        {
          "name": "launchWhatsApp",
          "description": "Launches the WhatsApp application or the WhatsApp web interface with a pre-filled message and recipient phone number.",
          "parameters": [
            "phone",
            "text"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "launchEmail",
          "description": "Launches the default email application with the specified email address.",
          "parameters": [
            "email"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "dart:io",
        "package:url_launcher/url_launcher.dart"
      ]
    },
    {
      "name": "lib/utils/date/date_util.dart",
      "description": "The `DateUtil` class provides a set of utility functions for handling date and time data in the application, particularly when interacting with Firestore.",
      "class_diagram": "@startuml\nclass DateUtil {\n  + static DateTime? fromJson(dynamic value)\n}\n@enduml",
      "methods": [
        {
          "name": "fromJson",
          "description": "Extracts a `DateTime` object from a dynamic input value, which can be a `Timestamp` from Firestore, a `String` representation of a date and time, or a `DateTime` object directly.",
          "parameters": [
            "dynamic value"
          ],
          "return_type": "DateTime?"
        }
      ],
      "dependencies": [
        "cloud_firestore/cloud_firestore.dart"
      ]
    },
    {
      "name": "lib/utils/exceptions/api_exception.dart",
      "description": "This file defines a custom exception class `APIException` that is used to handle and propagate exceptions that occur during API service interactions. It provides a standardized way to handle and communicate errors that arise in the application's API layer.",
      "class_diagram": "@startuml\n  class APIException implements Exception {\n    -dynamic message\n    +toString(): String\n  }\n  @enduml",
      "methods": [
        {
          "name": "APIException",
          "description": "Constructor for the `APIException` class. Allows for the creation of a new `APIException` instance with an optional error message.",
          "parameters": [
            "message"
          ],
          "return_type": null
        },
        {
          "name": "toString",
          "description": "Overrides the default `toString()` method to provide a string representation of the `APIException` instance, including the runtime type and the error message.",
          "parameters": null,
          "return_type": "String"
        }
      ],
      "dependencies": [
        "dart:core"
      ]
    },
    {
      "name": "lib/utils/extensions/color_extension.dart",
      "description": "This Dart file provides a custom extension on the Flutter `Color` class, adding utility methods for converting hexadecimal color strings to `Color` objects and integer values. This extension simplifies the process of working with color-related functionality in the application, improving developer productivity and maintainability.",
      "class_diagram": "@startuml\nclass Color {\n  +static Color fromHex(String hexColorString)\n  +static int intFromHex(String hexColorString)\n}\n@enduml",
      "methods": [
        {
          "name": "fromHex",
          "description": "Converts a hexadecimal color string (e.g., '#FF0000' for red) to a `Color` object.",
          "parameters": [
            "hexColorString"
          ],
          "return_type": "Color"
        },
        {
          "name": "intFromHex",
          "description": "Converts a hexadecimal color string (e.g., '#FF0000' for red) to an integer value representing the color.",
          "parameters": [
            "hexColorString"
          ],
          "return_type": "int"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/utils/flavors/flavors.dart",
      "description": "This file defines a singleton class 'Flavors' that is responsible for managing the current application flavor, which is typically used to differentiate between development, staging, and production environments. The main purpose of this class is to provide a centralized way to access and check the current application flavor, enabling the application to behave differently based on the specific environment it is running in.",
      "class_diagram": "@startuml\nclass Flavors {\n  - static Flavor? flavor\n  + static bool get isDev()\n  + static bool get isProd()\n}\n@enduml",
      "methods": [
        {
          "name": "Flavors",
          "description": "Private constructor for the Flavors class, ensuring a singleton instance.",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "Flavors.factory",
          "description": "Factory constructor for the Flavors class, returning the singleton instance.",
          "parameters": null,
          "return_type": "Flavors"
        },
        {
          "name": "isDev",
          "description": "Getter that returns true if the current application flavor is Flavor.development.",
          "parameters": null,
          "return_type": "bool"
        },
        {
          "name": "isProd",
          "description": "Getter that returns true if the current application flavor is Flavor.production.",
          "parameters": null,
          "return_type": "bool"
        }
      ],
      "dependencies": [
        "my_app/models/enums/flavor.dart"
      ]
    },
    {
      "name": "lib/utils/json/json_util.dart",
      "description": "The JsonUtil class is responsible for providing utility functions to handle JSON data in the application. It solves the problem of safely and consistently parsing and formatting JSON data, which is a common task in modern web and mobile applications.",
      "class_diagram": "@startuml\nclass JsonUtil {\n  +static Map<String, dynamic> formatMap(Map<dynamic, dynamic>)\n  +static T? fromJsonOrNull<T>(dynamic, T Function(Map<String, dynamic>))\n  +static List<T> formatListMap<T>(List<dynamic>, T Function(Map<String, dynamic>))\n}\n@enduml",
      "methods": [
        {
          "name": "formatMap",
          "description": "Converts a Map<dynamic, dynamic> to a Map<String, dynamic> by removing any null keys.",
          "parameters": [
            "Map<dynamic, dynamic>"
          ],
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "fromJsonOrNull",
          "description": "Safely converts a dynamic JSON value to an instance of type T, or returns null if the input is invalid.",
          "parameters": [
            "dynamic",
            "T Function(Map<String, dynamic>)"
          ],
          "return_type": "T?"
        },
        {
          "name": "formatListMap",
          "description": "Converts a List<dynamic> of JSON objects to a List<T> by applying the given fromJson function to each object.",
          "parameters": [
            "List<dynamic>",
            "T Function(Map<String, dynamic>)"
          ],
          "return_type": "List<T>"
        }
      ],
      "dependencies": [
        "dart:core",
        "dart:collection"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "This file defines an InfoAlertDialog class, which is responsible for displaying an informative alert dialog with a title, description, and a confirmation button. The primary purpose of this class is to provide a reusable and customizable way to present important information to the user within the application.",
      "class_diagram": "@startuml\nclass InfoAlertDialog {\n  -DialogRequest request\n  -Function(DialogResponse) completer\n  +builder(BuildContext, InfoAlertDialogModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): InfoAlertDialogModel\n}\n\nclass InfoAlertDialogModel {\n}\n\nInfoAlertDialog *-- InfoAlertDialogModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "The main build method that constructs the UI for the InfoAlertDialog. It takes the DialogRequest, DialogResponse completer, and the view model as input and returns the final widget.",
          "parameters": [
            "BuildContext",
            "InfoAlertDialogModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "A method that creates and returns an instance of the InfoAlertDialogModel, which is used to manage the state and logic of the dialog.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog_model.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/config/development/firebase_options_development.dart",
      "description": "This Dart file is responsible for providing the configuration options for the Firebase service in the development environment of the application. It defines the necessary credentials and settings to initialize and interact with the Firebase platform during the development phase.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "firebase_core",
        "flutter_dotenv"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This file is responsible for setting up and managing the service locator in a Flutter application built using the Stacked architecture pattern. The service locator is a crucial component that allows different parts of the application to access and interact with various services and dependencies, promoting a modular and decoupled design.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method is responsible for registering the necessary services and dependencies with the service locator. It allows the application to access and use these services throughout the codebase.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/l10n/l10n.dart",
      "description": "Centralized localization and internationalization (i18n) configuration export file that provides standardized access to app localization resources and supported language configurations",
      "class_diagram": "@startuml\npackage Localization {\n    [app_localizations.dart]\n    [localizations_extension.dart]\n    [supported_locales.dart]\n}\n@enduml",
      "methods": [
        {
          "name": "exportLocalizations",
          "description": "Exports core localization components for unified language support across the application",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:flutter_gen/gen_l10n/app_localizations.dart",
        "localizations_extension.dart",
        "supported_locales.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This file is responsible for setting up and managing the dialog system used throughout the application. It defines the available dialog types, registers the custom dialog builders, and provides a centralized way to interact with the dialog service.",
      "class_diagram": "@startuml\n'Hide the stereotype since it is the default for class\n'hide circle\n'hide methods\n'skinparam classAttributeIconSize 0\n\nclass DialogType {\n  infoAlert\n}\n\nclass DialogBuilder {\n  (BuildContext, DialogRequest, DialogCompleter) => Widget\n}\n\nclass DialogService {\n  + registerCustomDialogBuilders(Map<DialogType, DialogBuilder>)\n}\n\n'Relationships\nDialogType *-- DialogBuilder : builds\nDialogService o-- DialogBuilder : uses\n\n@enduml",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "Configures the dialog service by registering the custom dialog builders for each dialog type.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/app/app_view.dart",
      "description": "The `AppView` class is the main entry point for the Flutter application. It is responsible for setting up the overall application structure, including the navigation, localization, and event handling. This class serves as the foundation for the entire application, providing the core functionality and user experience.",
      "class_diagram": "@startuml\nclass AppView {\n  +build(context, viewModel): Widget\n}\n\nclass _App {\n  +build(context, viewModel): Widget\n}\n\nAppView *-- _App\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the main application widget tree, including the MaterialApp, navigation, localization, and event handling.",
          "parameters": [
            "context",
            "viewModel"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/app/app.router.dart",
        "package:my_app/l10n/supported_locales.dart",
        "package:my_app/observer/screen_observer.dart",
        "package:my_app/ui/views/app/app_viewmodel.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/consultation/widgets/consultation_form.dart",
      "description": "The ConsultationForm widget is responsible for rendering a form that allows healthcare providers to input and submit details about a patient's consultation, including symptoms, diagnosis, prescription, and additional notes. This form is a crucial component in the consultation workflow of the healthcare application, enabling efficient documentation and record-keeping of patient consultations.",
      "class_diagram": "@startuml\nclass ConsultationForm {\n  -TextEditingController symptomsController\n  -TextEditingController diagnosisController\n  -TextEditingController prescriptionController\n  -TextEditingController notesController\n  -bool isLoading\n  -String? errorMessage\n  -VoidCallback onSubmit\n  \n  +build(BuildContext): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the ConsultationForm widget, including text fields for symptoms, diagnosis, prescription, and additional notes, as well as a submit button. The form also displays any error messages and handles the loading state.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/widgets/custom_text_field.dart"
      ]
    },
    {
      "name": "lib/features/consultation/consultation_repository.dart",
      "description": "The ConsultationRepository class is the primary interface for managing consultation data in the application. It provides methods to fetch, create, update, and delete consultation records for a specific patient. The repository acts as an abstraction layer, hiding the underlying data storage implementation from the rest of the application.",
      "class_diagram": "@startuml\nclass ConsultationRepository {\n  - List<Consultation> _mockConsultations\n  + Future<List<Consultation>> getConsultationsForPatient(String patientId)\n  + Future<Consultation> getConsultationById(String id)\n  + Future<void> addConsultation(Consultation consultation)\n  + Future<void> updateConsultation(Consultation consultation)\n  + Future<void> deleteConsultation(String id)\n}\n@enduml",
      "methods": [
        {
          "name": "getConsultationsForPatient",
          "description": "Retrieves a list of consultations for the specified patient ID.",
          "parameters": [
            "String patientId"
          ],
          "return_type": "Future<List<Consultation>>"
        },
        {
          "name": "getConsultationById",
          "description": "Retrieves a single consultation record by its ID.",
          "parameters": [
            "String id"
          ],
          "return_type": "Future<Consultation>"
        },
        {
          "name": "addConsultation",
          "description": "Adds a new consultation record to the repository.",
          "parameters": [
            "Consultation consultation"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "updateConsultation",
          "description": "Updates an existing consultation record in the repository.",
          "parameters": [
            "Consultation consultation"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deleteConsultation",
          "description": "Removes a consultation record from the repository by its ID.",
          "parameters": [
            "String id"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:my_app/models/consultation.dart"
      ]
    },
    {
      "name": "lib/features/consultation/consultation_view.dart",
      "description": "The `ConsultationView` class is responsible for rendering the UI for a patient consultation. It provides a form-based interface where a healthcare provider can input symptoms, diagnosis, prescription, and notes for a particular patient. The class also handles the submission of the consultation data and displays any errors that occur during the process.",
      "class_diagram": "@startuml\nclass ConsultationView {\n  +Widget builder(BuildContext, ConsultationViewModel, Widget?)\n  +ConsultationViewModel viewModelBuilder(BuildContext)\n  +void onViewModelReady(ConsultationViewModel)\n}\n\nclass ConsultationViewModel {\n  +String patientId\n  +TextEditingController symptomsController\n  +TextEditingController diagnosisController\n  +TextEditingController prescriptionController\n  +TextEditingController notesController\n  +bool isEditing\n  +bool isBusy\n  +dynamic modelError\n  +void initialize()\n  +void saveConsultation()\n}\n\nclass ConsultationForm {\n  +TextEditingController symptomsController\n  +TextEditingController diagnosisController\n  +TextEditingController prescriptionController\n  +TextEditingController notesController\n  +bool isLoading\n  +String? errorMessage\n  +VoidCallback onSubmit\n  +Widget build(BuildContext)\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the `ConsultationView` based on the state of the `ConsultationViewModel`.",
          "parameters": [
            "BuildContext",
            "ConsultationViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates a new instance of the `ConsultationViewModel` with the provided `patientId`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "ConsultationViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Initializes the `ConsultationViewModel` when the `ConsultationView` is ready.",
          "parameters": [
            "ConsultationViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/features/consultation/consultation_viewmodel.dart",
        "package:my_app/features/consultation/widgets/consultation_form.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/widgets/custom_app_bar.dart",
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/patient_details/patient_details_repository.dart",
      "description": "This Dart file defines the PatientDetailsRepository class, which is responsible for managing the retrieval and update of patient details in the application. It acts as an intermediary between the user interface and the underlying data source, abstracting the details of how patient data is accessed and modified.",
      "class_diagram": "@startuml\nclass PatientDetailsRepository {\n  +Future<Patient> getPatientDetails(String patientId)\n  +Future<void> updatePatientDetails(Patient patient)\n}\n@enduml",
      "methods": [
        {
          "name": "getPatientDetails",
          "description": "Retrieves the details for a specific patient identified by the provided patientId. This method fetches the patient data from the underlying data source, which could be an API or a local database.",
          "parameters": [
            "patientId"
          ],
          "return_type": "Future<Patient>"
        },
        {
          "name": "updatePatientDetails",
          "description": "Updates the details for a specific patient. This method takes a Patient object as a parameter and persists the changes to the underlying data source.",
          "parameters": [
            "patient"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "my_app/models/patient.dart"
      ]
    },
    {
      "name": "lib/features/patient_details/widgets/consultation_history.dart",
      "description": "This file provides a widget that displays the consultation history for a patient. It is responsible for rendering a list of past consultations, including details such as the consultation date, symptoms, diagnosis, and prescription (if any). The widget also allows users to tap on a specific consultation to view more details.",
      "class_diagram": "@startuml\nclass ConsultationHistory {\n  - List<Consultation> consultations\n  - Function(Consultation) onConsultationTap\n  + Widget build(BuildContext)\n  - Widget _buildInfoRow(String, String)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the ConsultationHistory widget, rendering a list of past consultations or a message indicating no history if the list is empty.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_buildInfoRow",
          "description": "Builds a row displaying a label and value for a specific consultation detail (e.g., symptoms, diagnosis, prescription).",
          "parameters": [
            "String",
            "String"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "my_app/models/consultation.dart",
        "my_app/ui/common/app_colors.dart",
        "intl/intl.dart"
      ]
    },
    {
      "name": "lib/features/patient_details/patient_details_viewmodel.dart",
      "description": "The PatientDetailsViewModel is responsible for managing the state and functionality related to displaying the details of a patient, including their consultation history. It fetches the patient information and their consultation data from the corresponding services, and provides methods for navigating to the new consultation view and handling the selection of a consultation.",
      "class_diagram": "@startuml\nclass PatientDetailsViewModel {\n  - _patientService: PatientService\n  - _consultationService: ConsultationService\n  - _navigationService: NavigationService\n  - _patient: Patient\n  - _consultations: List<Consultation>\n  + patientId: String\n  + patient: Patient\n  + consultations: List<Consultation>\n  + initialize(): Future<void>\n  + navigateToNewConsultation(): void\n  + onConsultationTap(Consultation): void\n  + refreshData(): Future<void>\n}\n@enduml",
      "methods": [
        {
          "name": "initialize",
          "description": "Initializes the view model by loading the patient and their consultation data from the respective services.",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "navigateToNewConsultation",
          "description": "Navigates to the consultation view, passing the patient ID as an argument.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "onConsultationTap",
          "description": "Handles the tap event on a consultation, and navigates to the consultation details view (not yet implemented).",
          "parameters": [
            "Consultation"
          ],
          "return_type": "void"
        },
        {
          "name": "refreshData",
          "description": "Refreshes the patient and consultation data by calling the initialize method.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/app/app.router.dart",
        "my_app/models/consultation.dart",
        "my_app/models/patient.dart",
        "my_app/services/consultation_service.dart",
        "my_app/services/patient_service.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/models/patient.dart",
      "description": "The `Patient` class represents the core entity of a patient in a healthcare application. It encapsulates the essential information about a patient, including their personal details, medical history, and timestamps for creation and updates. This class serves as a data model to facilitate data storage, retrieval, and manipulation throughout the application, enabling efficient management of patient records.",
      "class_diagram": "@startuml\nclass Patient {\n  -String id\n  -String name\n  -String phoneNumber\n  -String? email\n  -DateTime dateOfBirth\n  -String? medicalHistory\n  -DateTime createdAt\n  -DateTime updatedAt\n  +Patient.fromJson(Map<String, dynamic> json)\n  +Map<String, dynamic> toJson()\n  +Patient copyWith({...})\n}\n@enduml",
      "methods": [
        {
          "name": "Patient.fromJson",
          "description": "Constructs a `Patient` instance from a JSON map, parsing the relevant fields.",
          "parameters": [
            "Map<String, dynamic> json"
          ],
          "return_type": "Patient"
        },
        {
          "name": "toJson",
          "description": "Converts the `Patient` instance to a JSON map, serializing the relevant fields.",
          "parameters": null,
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "copyWith",
          "description": "Creates a new `Patient` instance with the specified field values, allowing for partial updates.",
          "parameters": [
            "String? id",
            "String? name",
            "String? phoneNumber",
            "String? email",
            "DateTime? dateOfBirth",
            "String? medicalHistory",
            "DateTime? createdAt",
            "DateTime? updatedAt"
          ],
          "return_type": "Patient"
        }
      ],
      "dependencies": [
        "package:equatable/equatable.dart"
      ]
    },
    {
      "name": "lib/models/consultation.dart",
      "description": "The `Consultation` class represents a medical consultation record in the application. It encapsulates the key information related to a patient's consultation, including the diagnosis, symptoms, prescription, and consultation details. This class serves as a data model for managing and persisting consultation data across the application.",
      "class_diagram": "@startuml\nclass Consultation {\n  +String id\n  +String patientId\n  +String diagnosis\n  +String symptoms\n  +String? prescription\n  +String? notes\n  +DateTime consultationDate\n  +DateTime createdAt\n  +DateTime updatedAt\n  +Consultation.fromJson(Map<String, dynamic>)\n  +Map<String, dynamic> toJson()\n  +Consultation copyWith()\n}\n@enduml",
      "methods": [
        {
          "name": "Consultation",
          "description": "The constructor for the `Consultation` class, which initializes the required and optional properties of a consultation record.",
          "parameters": [
            "id",
            "patientId",
            "diagnosis",
            "symptoms",
            "prescription",
            "notes",
            "consultationDate",
            "createdAt",
            "updatedAt"
          ],
          "return_type": null
        },
        {
          "name": "fromJson",
          "description": "A factory constructor that creates a `Consultation` instance from a JSON map representation.",
          "parameters": [
            "Map<String, dynamic>"
          ],
          "return_type": "Consultation"
        },
        {
          "name": "toJson",
          "description": "Converts the `Consultation` instance into a JSON map representation.",
          "parameters": null,
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "copyWith",
          "description": "Creates a new `Consultation` instance with the specified updated properties.",
          "parameters": [
            "id",
            "patientId",
            "diagnosis",
            "symptoms",
            "prescription",
            "notes",
            "consultationDate",
            "createdAt",
            "updatedAt"
          ],
          "return_type": "Consultation"
        }
      ],
      "dependencies": [
        "package:equatable/equatable.dart"
      ]
    },
    {
      "name": "lib/services/consultation_service.dart",
      "description": "The ConsultationService is responsible for managing the consultation data for patients in the application. It provides methods to retrieve, add, update, and delete consultations, and it integrates with the ConsultationRepository to interact with the underlying data storage.",
      "class_diagram": "@startuml\nclass ConsultationService {\n  - _consultationRepository: ConsultationRepository\n  - _consultations: List<Consultation>\n  + consultations: List<Consultation>\n  + getConsultationsForPatient(String patientId): Future<List<Consultation>>\n  + addConsultation(Consultation consultation): Future<void>\n  + updateConsultation(Consultation consultation): Future<void>\n  + deleteConsultation(String id): Future<void>\n}\n\nclass ConsultationRepository {\n  + getConsultationsForPatient(String patientId): Future<List<Consultation>>\n  + addConsultation(Consultation consultation): Future<void>\n  + updateConsultation(Consultation consultation): Future<void>\n  + deleteConsultation(String id): Future<void>\n}\n\nConsultationService --> ConsultationRepository\n@enduml",
      "methods": [
        {
          "name": "getConsultationsForPatient",
          "description": "Retrieves the list of consultations for a given patient ID from the ConsultationRepository, stores them in the _consultations list, and notifies listeners of the update.",
          "parameters": [
            "String patientId"
          ],
          "return_type": "Future<List<Consultation>>"
        },
        {
          "name": "addConsultation",
          "description": "Adds a new consultation to the ConsultationRepository, updates the _consultations list, and notifies listeners of the change.",
          "parameters": [
            "Consultation consultation"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "updateConsultation",
          "description": "Updates an existing consultation in the ConsultationRepository, updates the corresponding consultation in the _consultations list, and notifies listeners of the change.",
          "parameters": [
            "Consultation consultation"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deleteConsultation",
          "description": "Deletes a consultation with the given ID from the ConsultationRepository, removes the corresponding consultation from the _consultations list, and notifies listeners of the change.",
          "parameters": [
            "String id"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "my_app/features/consultation/consultation_repository.dart",
        "my_app/models/consultation.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/theme/app_theme.dart",
      "description": "This Dart file defines the main theme and visual style for a Flutter application. It provides a consistent and coherent look and feel across the entire app by centralizing the definition of colors, typography, input fields, and other UI elements.",
      "class_diagram": "@startuml\nclass AppTheme {\n  +static ThemeData get lightTheme\n}\n@enduml",
      "methods": [
        {
          "name": "get lightTheme",
          "description": "Returns the main light theme configuration for the application, which includes primary and secondary colors, typography styles, input field styles, and button styles.",
          "parameters": null,
          "return_type": "ThemeData"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/theme/text_styles.dart"
      ]
    },
    {
      "name": "lib/ui/theme/spacing.dart",
      "description": "This Dart file defines a `Spacing` class that provides a consistent set of spacing values and constants for use in a Flutter application's UI. The class encapsulates commonly used spacing sizes, such as 'xs', 's', 'm', 'l', 'xl', and 'xxl', and provides separate constants for horizontal and vertical spacing, as well as padding and border radius values.",
      "class_diagram": "@startuml\nclass Spacing {\n  static const double xs = 4\n  static const double s = 8\n  static const double m = 16\n  static const double l = 24\n  static const double xl = 32\n  static const double xxl = 48\n\n  static const double horizontalXS = xs\n  static const double horizontalS = s\n  static const double horizontalM = m\n  static const double horizontalL = l\n  static const double horizontalXL = xl\n  static const double horizontalXXL = xxl\n\n  static const double verticalXS = xs\n  static const double verticalS = s\n  static const double verticalM = m\n  static const double verticalL = l\n  static const double verticalXL = xl\n  static const double verticalXXL = xxl\n\n  static const double paddingXS = xs\n  static const double paddingS = s\n  static const double paddingM = m\n  static const double paddingL = l\n  static const double paddingXL = xl\n  static const double paddingXXL = xxl\n\n  static const double radiusXS = xs\n  static const double radiusS = s\n  static const double radiusM = m\n  static const double radiusL = l\n  static const double radiusXL = xl\n}\n@enduml",
      "methods": [
        {
          "name": "Spacing",
          "description": "Constructor for the Spacing class (not shown in the class diagram as it is not a public method).",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": []
    },
    {
      "name": "lib/ui/theme/text_styles.dart",
      "description": "This Dart file defines a set of reusable text styles that can be used throughout the application's user interface. It provides a centralized location to manage and apply consistent typography across the app.",
      "class_diagram": "```plantuml\n  class AppTextStyles {\n    +static heading1: TextStyle\n    +static heading2: TextStyle\n    +static heading3: TextStyle\n    +static body1: TextStyle\n    +static body2: TextStyle\n    +static button: TextStyle\n    +static caption: TextStyle\n  }\n  ```",
      "methods": [
        {
          "name": "AppTextStyles",
          "description": "This is a utility class that provides a set of predefined text styles for the application.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "lib/ui/common/app_colors.dart"
      ]
    },
    {
      "name": "lib/ui/widgets/custom_app_bar.dart",
      "description": "This Dart file defines a custom AppBar widget that provides a consistent header for the application's user interface. It is responsible for rendering the app's top navigation bar, including the title, optional actions, and a back button.",
      "class_diagram": "@startuml\nclass CustomAppBar implements PreferredSizeWidget {\n  -String title\n  -List<Widget>? actions\n  -bool showBackButton\n  +Widget build(BuildContext)\n  +Size get preferredSize\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the CustomAppBar widget, which includes the app title, optional actions, and back button if configured.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        },
        {
          "name": "preferredSize",
          "description": "Returns the preferred size of the CustomAppBar, which is the standard toolbar height.",
          "parameters": null,
          "return_type": "Size"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "lib/ui/common/app_colors.dart"
      ]
    },
    {
      "name": "lib/ui/widgets/custom_button.dart",
      "description": "This file defines a custom button widget that can be used throughout the Flutter application. The CustomButton widget provides a consistent and configurable button UI, including support for loading states and outlined/filled styles.",
      "class_diagram": "@startuml\nclass CustomButton extends StatelessWidget {\n  - String text\n  - VoidCallback onPressed\n  - bool isLoading\n  - bool isOutlined\n  - Color? backgroundColor\n  - Color? textColor\n  + Widget build(BuildContext context)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the custom button widget based on the provided properties.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/common/app_colors.dart"
      ]
    },
    {
      "name": "lib/ui/widgets/custom_text_field.dart",
      "description": "The `CustomTextField` widget provides a reusable and customizable text input field for the application. It abstracts away the details of creating a `TextFormField` with common functionality, such as label, hint, validation, keyboard type, and suffix widget.",
      "class_diagram": "@startuml\nclass CustomTextField extends StatelessWidget {\n  -String label\n  -String? hint\n  -TextEditingController? controller\n  -String? Function(String?)? validator\n  -TextInputType keyboardType\n  -int maxLines\n  -bool obscureText\n  -Widget? suffix\n  -void Function(String)? onChanged\n  +Widget build(BuildContext context)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the `CustomTextField` widget, which includes a label, text input field, and optional suffix widget.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/common/app_colors.dart"
      ]
    },
    {
      "name": "lib/services/patient_service.dart",
      "description": "The PatientService class is responsible for managing the patient data in the application. It provides a centralized interface for interacting with the patient repository, allowing the application to fetch, create, update, and delete patient records.",
      "class_diagram": "@startuml\nclass PatientService {\n  +List<Patient> patients\n  +Future<void> getPatients()\n  +Future<Patient> getPatientById(String id)\n  +Future<void> addPatient(Patient patient)\n  +Future<void> updatePatient(Patient patient)\n  +Future<void> deletePatient(String id)\n}\n\nPatientService o-- PatientsRepository\n@enduml",
      "methods": [
        {
          "name": "getPatients",
          "description": "Fetches the list of all patients from the repository and stores them in the `patients` property.",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "getPatientById",
          "description": "Retrieves a single patient from the repository based on the provided ID.",
          "parameters": [
            "String id"
          ],
          "return_type": "Future<Patient>"
        },
        {
          "name": "addPatient",
          "description": "Adds a new patient to the repository and updates the local `patients` list.",
          "parameters": [
            "Patient patient"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "updatePatient",
          "description": "Updates an existing patient in the repository and synchronizes the local `patients` list.",
          "parameters": [
            "Patient patient"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deletePatient",
          "description": "Removes a patient from the repository and updates the local `patients` list.",
          "parameters": [
            "String id"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "my_app/features/patients/patients_repository.dart",
        "my_app/models/patient.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/patients/patients_view.dart",
      "description": "The `PatientsView` class is responsible for displaying a list of patients and providing functionality to navigate to the patient details screen or add a new patient. It serves as the main entry point for the patient management feature of the application.",
      "class_diagram": "@startuml\nclass PatientsView {\n  +builder(BuildContext, PatientsViewModel, Widget): Widget\n  +_buildContent(BuildContext, PatientsViewModel): Widget\n  +viewModelBuilder(BuildContext): PatientsViewModel\n  +onViewModelReady(PatientsViewModel): void\n}\n\nclass PatientsViewModel {\n  +isBusy: bool\n  +modelError: Error\n  +patients: List<Patient>\n  +initialise(): Future<void>\n  +refreshPatients(): Future<void>\n  +navigateToAddPatient(): void\n  +navigateToPatientDetails(String): void\n}\n\nclass Patient {\n  +id: String\n  +name: String\n  +email: String\n  +phone: String\n}\n\nPatientsView --> PatientsViewModel\nPatientsViewModel --> Patient\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the main UI of the `PatientsView` widget, including the app bar, progress indicator, error handling, and the list of patients.",
          "parameters": [
            "BuildContext",
            "PatientsViewModel",
            "Widget"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_buildContent",
          "description": "Constructs the main content of the `PatientsView` based on the state of the `PatientsViewModel`.",
          "parameters": [
            "BuildContext",
            "PatientsViewModel"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the `PatientsViewModel` to the `StackedView`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "PatientsViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Initializes the `PatientsViewModel` when the `PatientsView` is ready.",
          "parameters": [
            "PatientsViewModel"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/widgets/custom_app_bar.dart",
        "package:my_app/ui/widgets/custom_button.dart",
        "package:my_app/features/patients/patients_viewmodel.dart",
        "package:my_app/features/patients/widgets/patient_card.dart",
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/patients/widgets/patient_card.dart",
      "description": "The PatientCard widget is responsible for displaying a card-like UI element that represents a patient's information. It is a key component in the patient management feature of the application.",
      "class_diagram": "@startuml\nclass PatientCard extends StatelessWidget {\n  -Patient patient\n  -VoidCallback onTap\n  +Widget build(BuildContext)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the PatientCard widget, which includes the patient's name, date of birth, and a circular avatar displaying the first letter of their name.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "my_app/models/patient.dart",
        "my_app/ui/common/app_colors.dart",
        "intl/intl.dart"
      ]
    },
    {
      "name": "lib/features/consultation/consultation_viewmodel.dart",
      "description": "The ConsultationViewModel is responsible for managing the state and behavior of the consultation feature in the application. It provides the functionality to create, update, and save patient consultations, including recording symptoms, diagnosis, prescription, and notes. The primary purpose of this class is to handle the core logic and data flow for the consultation process, making it a critical component of the application's medical service functionality.",
      "class_diagram": "@startuml\nclass ConsultationViewModel {\n  +final String patientId\n  +final _consultationService\n  +final _navigationService\n  +final symptomsController\n  +final diagnosisController\n  +final prescriptionController\n  +final notesController\n  +Consultation? _consultation\n  +bool get isEditing\n  +ConsultationViewModel(patientId)\n  +Future<void> initialize()\n  +Future<void> saveConsultation()\n  -bool _validateForm()\n  +override void dispose()\n}\n@enduml",
      "methods": [
        {
          "name": "initialize",
          "description": "Initializes the view model by loading the existing consultation data, if any, and populating the corresponding text controllers.",
          "parameters": [
            "void"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "saveConsultation",
          "description": "Saves the consultation data, either creating a new one or updating an existing one, and navigates back to the previous screen.",
          "parameters": [
            "void"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "_validateForm",
          "description": "Validates the form input, ensuring that the required fields (symptoms and diagnosis) are not empty.",
          "parameters": [
            "void"
          ],
          "return_type": "bool"
        },
        {
          "name": "dispose",
          "description": "Cleans up the view model by disposing of the text controllers.",
          "parameters": [
            "void"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/models/consultation.dart",
        "package:my_app/services/consultation_service.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/patients/patients_repository.dart",
      "description": "A repository class that manages patient data operations in a mock/simulated environment, providing CRUD (Create, Read, Update, Delete) functionality for patient records with asynchronous methods",
      "class_diagram": "@startuml\nclass PatientsRepository {\n  - _mockPatients: List<Patient>\n  + getPatients(): Future<List<Patient>>\n  + getPatientById(id: String): Future<Patient>\n  + addPatient(patient: Patient): Future<void>\n  + updatePatient(patient: Patient): Future<void>\n  + deletePatient(id: String): Future<void>\n}\n@enduml",
      "methods": [
        {
          "name": "getPatients",
          "description": "Retrieves the complete list of patient records with a simulated network delay",
          "parameters": null,
          "return_type": "Future<List<Patient>>"
        },
        {
          "name": "getPatientById",
          "description": "Finds and returns a specific patient record by their unique identifier",
          "parameters": [
            "id"
          ],
          "return_type": "Future<Patient>"
        },
        {
          "name": "addPatient",
          "description": "Creates and adds a new patient record to the repository",
          "parameters": [
            "patient"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "updatePatient",
          "description": "Modifies an existing patient record in the repository",
          "parameters": [
            "patient"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deletePatient",
          "description": "Removes a patient record from the repository by their unique identifier",
          "parameters": [
            "id"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "my_app/models/patient.dart"
      ]
    },
    {
      "name": "lib/features/patients/patients_viewmodel.dart",
      "description": "A ViewModel responsible for managing patient-related data and navigation, serving as a critical layer between the patient data service and the user interface in a medical application.",
      "class_diagram": "@startuml\nclass PatientsViewModel {\n  -_patientService: PatientService\n  -_navigationService: NavigationService\n  -_patients: List<Patient>\n  +patients: List<Patient>\n  +initialise()\n  +loadPatients()\n  +refreshPatients()\n  +navigateToAddPatient()\n  +navigateToPatientDetails(patientId: String)\n}\n@enduml",
      "methods": [
        {
          "name": "initialise",
          "description": "Asynchronously loads patients when the view model is first initialized",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "loadPatients",
          "description": "Retrieves patient list from patient service and handles potential loading errors",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "refreshPatients",
          "description": "Reloads patient data and notifies listeners of changes",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "navigateToPatientDetails",
          "description": "Navigates to a specific patient's details page using patient ID",
          "parameters": [
            "patientId"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked",
        "stacked_services",
        "patient_service.dart",
        "patient.dart"
      ]
    },
    {
      "name": "lib/features/patient_details/patient_details_view.dart",
      "description": "The PatientDetailsView class is responsible for displaying the details of a patient, including their personal information and consultation history. It serves as the main UI component for the patient details feature, providing a comprehensive view of the patient's information to healthcare providers.",
      "class_diagram": "@startuml\nclass PatientDetailsView {\n  +String patientId\n  +Widget builder(BuildContext, PatientDetailsViewModel, Widget?)\n  +Widget _buildContent(BuildContext, PatientDetailsViewModel)\n  +Widget _buildPatientInfo(patient)\n  +Widget _buildInfoRow(String, String)\n  +PatientDetailsViewModel viewModelBuilder(BuildContext)\n  +void onViewModelReady(PatientDetailsViewModel)\n}\n\nclass PatientDetailsViewModel {\n  +Patient? patient\n  +List<Consultation> consultations\n  +bool isBusy\n  +dynamic modelError\n  +void initialize()\n  +void navigateToNewConsultation()\n  +void onConsultationTap(Consultation)\n}\n\nPatientDetailsView --> PatientDetailsViewModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the main UI for the PatientDetailsView, including the app bar, body, and floating action button.",
          "parameters": [
            "BuildContext",
            "PatientDetailsViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_buildContent",
          "description": "Builds the main content of the PatientDetailsView, displaying the patient's information and consultation history.",
          "parameters": [
            "BuildContext",
            "PatientDetailsViewModel"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_buildPatientInfo",
          "description": "Builds the UI for displaying the patient's personal information, such as name, date of birth, phone number, email, and medical history.",
          "parameters": [
            "patient"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_buildInfoRow",
          "description": "Builds a single row of information, with a label and the corresponding value.",
          "parameters": [
            "String",
            "String"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the PatientDetailsViewModel, which manages the state and logic for the patient details feature.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "PatientDetailsViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Initializes the PatientDetailsViewModel when the view is ready.",
          "parameters": [
            "PatientDetailsViewModel"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "my_app/features/patient_details/patient_details_viewmodel.dart",
        "my_app/features/patient_details/widgets/consultation_history.dart",
        "my_app/ui/common/app_colors.dart",
        "my_app/ui/widgets/custom_app_bar.dart",
        "my_app/ui/widgets/custom_button.dart",
        "stacked/stacked.dart",
        "intl/intl.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant AppView\nparticipant PatientsView\nparticipant PatientsViewModel\nparticipant PatientDetailsView\nparticipant PatientDetailsViewModel\nparticipant ConsultationView\nparticipant ConsultationViewModel\n\nUser -> main: Launch app\nmain -> AppView: Create and run\nAppView -> PatientsView: Initialize\nPatientsView -> PatientsViewModel: Fetch patient list\nPatientsViewModel -> PatientsView: Update UI\nUser -> PatientsView: Select patient\nPatientsView -> PatientDetailsView: Navigate\nPatientDetailsView -> PatientDetailsViewModel: Initialize\nPatientDetailsViewModel -> PatientDetailsView: Update UI\nUser -> PatientDetailsView: Select new consultation\nPatientDetailsView -> ConsultationView: Navigate\nConsultationView -> ConsultationViewModel: Initialize\nConsultationViewModel -> ConsultationService: Save consultation\nConsultationViewModel -> ConsultationView: Update UI\nUser -> ConsultationView: Submit consultation\nConsultationView -> PatientDetailsView: Navigate back\n@enduml",
  "state_management_flow": "The application uses the Stacked architecture for state management. Each view has a corresponding ViewModel that handles the business logic and state for that view. The ViewModels are responsible for updating the UI, interacting with services (e.g., PatientService, ConsultationService), and managing the application's overall state. The app.locator.dart file sets up the necessary dependency injections, allowing the ViewModels to access the required services.",
  "navigation_flow": "The application's navigation is managed using the Stacked Router, defined in app.router.dart. The main entry point is the AppView, which initializes the Stacked architecture and displays the PatientsView. The PatientsView allows the user to navigate to the PatientDetailsView, which in turn allows the user to navigate to the ConsultationView. The navigation between these views is handled by the corresponding ViewModels, which utilize the NavigationService provided by the Stacked architecture."
}