{
  "package_name": "com.walturn.my_app",
  "project_description": "The Flutter application is a healthcare management system that allows users to manage patient records, consultations, and authentication. The key features include patient listing, patient details view, creating new consultations, and user authentication. The application is built using the Stacked architecture, which separates the concerns of the UI, view models, and services.",
  "architecture_overview": "The application is structured using the Stacked architecture, which provides a clear separation of concerns between the UI, view models, and services. The main components include the App, AppView, various feature-specific views and view models, and services for managing patient data, consultations, authentication, and navigation. The application also uses a ScreenObserver to track screen transitions for analytics purposes.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/l10n/localizations_extension.dart",
      "description": "This Dart file provides an extension on the BuildContext class to make it easier to access the current AppLocalizations instance, which is responsible for managing the application's localization and internationalization.",
      "class_diagram": "",
      "methods": [
        {
          "name": "localizations",
          "description": "Retrieves the current AppLocalizations instance for the given BuildContext.",
          "parameters": null,
          "return_type": "AppLocalizations"
        }
      ],
      "dependencies": [
        "flutter/widgets.dart",
        "flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This file is responsible for managing the bottom sheet UI in the Flutter application. It sets up the custom bottom sheet builders for different types of bottom sheets, allowing the application to display various types of bottom sheets as needed.",
      "class_diagram": "@startuml\n\nclass BottomSheetService {\n  + setCustomSheetBuilders(builders: Map<BottomSheetType, SheetBuilder>)\n}\n\nclass BottomSheetType {\n  + notice\n}\n\ninterface SheetBuilder {\n  + (context: BuildContext, request: SheetRequest, completer: SheetCompleter)\n}\n\nclass NoticeSheet {\n  + (request: SheetRequest, completer: SheetCompleter)\n}\n\nBottomSheetService --> BottomSheetType\nBottomSheetService --> SheetBuilder\nNoticeSheet .> SheetBuilder\n\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "Sets up the custom bottom sheet builders for different types of bottom sheets, allowing the application to display various types of bottom sheets as needed.",
          "parameters": [
            "None"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/l10n/supported_locales.dart",
      "description": "This Dart file is responsible for managing the supported locales and localization delegates for the Flutter application. It provides a centralized and reusable way to handle the internationalization (i18n) and localization (l10n) of the app.",
      "class_diagram": "",
      "methods": [
        {
          "name": "localizationsDelegates",
          "description": "Returns a list of localization delegates that provide the translation and formatting logic for the application's strings.",
          "parameters": null,
          "return_type": "List<LocalizationsDelegate<dynamic>>"
        },
        {
          "name": "supportedLocales",
          "description": "Returns a list of locales that the application supports for translation and formatting.",
          "parameters": null,
          "return_type": "List<Locale>"
        }
      ],
      "dependencies": [
        "flutter/widgets.dart",
        "flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This file is responsible for managing the navigation and routing within the Flutter application. It defines the available routes, the corresponding views, and provides utility methods to navigate between these views.",
      "class_diagram": "@startuml\nclass Routes {\n  +static const homeView: String\n  +static const startupView: String\n  +static const all: Set<String>\n}\n\nclass StackedRouter extends RouterBase {\n  +List<RouteDef> get routes()\n  +Map<Type, StackedRouteFactory> get pagesMap()\n}\n\nclass NavigatorStateExtension on NavigationService {\n  +Future<dynamic> navigateToHomeView(...)\n  +Future<dynamic> navigateToStartupView(...)\n  +Future<dynamic> replaceWithHomeView(...)\n  +Future<dynamic> replaceWithStartupView(...)\n}\n@enduml",
      "methods": [
        {
          "name": "navigateToHomeView",
          "description": "Navigates to the HomeView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToStartupView",
          "description": "Navigates to the StartupView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithHomeView",
          "description": "Replaces the current route with the HomeView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithStartupView",
          "description": "Replaces the current route with the StartupView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/views/home/home_view.dart",
        "package:my_app/ui/views/startup/startup_view.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main/bootstrap.dart",
      "description": "This file is responsible for bootstrapping the Flutter application, setting up the necessary dependencies, and running the main app widget. It serves as the entry point for the application, ensuring a consistent initialization process across different app flavors.",
      "class_diagram": "",
      "methods": [
        {
          "name": "bootstrap",
          "description": "This is the main entry point function that initializes the application. It sets up the app's flavor, ensures the WidgetsFlutterBinding is initialized, and configures the app's orientation, locator, dialog UI, and bottom sheet UI. Finally, it runs the main app widget provided by the caller.",
          "parameters": [
            "builder",
            "flavor"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/utils/flavors/flavors.dart"
      ]
    },
    {
      "name": "lib/main/main_production.dart",
      "description": "This file is responsible for bootstrapping the production version of the application. It sets up the initial state and configuration for the app, ensuring it runs in the production environment.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main",
          "description": "The entry point of the application. It calls the `bootstrap` function to initialize the app and render the `AppView`.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/main/bootstrap.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/main/main_development.dart",
      "description": "This Dart file is responsible for bootstrapping the development version of the Flutter application. It sets up the application's entry point and configures the application flavor to be 'development'.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main",
          "description": "The main entry point of the application that initializes the development build of the app.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/main/bootstrap.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/models/enums/flavor.dart",
      "description": "This file defines an enum called `Flavor` with two values: `production` and `development`. It represents the different flavors or environments that the application can run in.",
      "class_diagram": "@startuml\nenum Flavor {\n  production\n  development\n}\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/services/analytic_service.dart",
      "description": "The AnalyticService class is a wrapper for analytics functionality in the application. It encapsulates the implementation of analytics tracking and provides a centralized interface for managing analytics-related operations.",
      "class_diagram": "@startuml\nclass AnalyticService {\n  + init(): Future<void>\n}\n@enduml",
      "methods": [
        {
          "name": "init",
          "description": "Initializes the AnalyticService, preparing it for use.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:stacked/stacked_annotations.dart"
      ]
    },
    {
      "name": "lib/observer/screen_observer.dart",
      "description": "The ScreenObserver class is responsible for tracking the screen views of the application using the AnalyticService. It is a NavigatorObserver that listens for navigation events and logs screen transitions to the analytics service.",
      "class_diagram": "@startuml\nclass ScreenObserver extends NavigatorObserver {\n  + ScreenObserver()\n  + void didPush(Route<dynamic> route, Route<dynamic>? previousRoute)\n  + void didReplace({Route<dynamic>? newRoute, Route<dynamic>? oldRoute})\n  + void didPop(Route<dynamic> route, Route<dynamic>? previousRoute)\n  - void _trackScreenView(Route<dynamic> route)\n}\n\nAnalyticService --* ScreenObserver\n@enduml",
      "methods": [
        {
          "name": "didPush",
          "description": "Tracks the screen view when a new route is pushed onto the navigation stack.",
          "parameters": [
            "Route<dynamic> route",
            "Route<dynamic>? previousRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "didReplace",
          "description": "Tracks the screen view when a route is replaced in the navigation stack.",
          "parameters": [
            "Route<dynamic>? newRoute",
            "Route<dynamic>? oldRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "didPop",
          "description": "Tracks the screen view when a route is popped from the navigation stack.",
          "parameters": [
            "Route<dynamic> route",
            "Route<dynamic>? previousRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "_trackScreenView",
          "description": "Logs the screen view to the AnalyticService based on the current route.",
          "parameters": [
            "Route<dynamic> route"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "my_app/services/analytic_service.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This Dart file defines a set of reusable color constants that represent the primary color palette of the application. These colors are used throughout the UI to ensure a consistent and branded visual experience.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "The NoticeSheetModel class is responsible for managing the state and behavior of the notice bottom sheet UI component in the application. It provides the core functionality and business logic for displaying and interacting with the notice sheet.",
      "class_diagram": "@startuml\nclass NoticeSheetModel {\n  +showNotice()\n  +dismissNotice()\n  +isLoading : bool\n  +noticeMessage : String\n}\n@enduml",
      "methods": [
        {
          "name": "showNotice",
          "description": "Displays the notice bottom sheet with the specified message.",
          "parameters": [
            "message"
          ],
          "return_type": "void"
        },
        {
          "name": "dismissNotice",
          "description": "Dismisses the currently displayed notice bottom sheet.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This Dart file provides a collection of common UI helper functions and constants that are used throughout the Flutter application's user interface. It serves as a centralized location for managing and accessing various UI-related utilities, ensuring consistency and reusability across the codebase.",
      "class_diagram": "@startuml\nclass UIHelpers {\n  + const horizontalSpaceTiny: Widget\n  + const horizontalSpaceSmall: Widget\n  + const horizontalSpaceMedium: Widget\n  + const horizontalSpaceLarge: Widget\n  + const verticalSpaceTiny: Widget\n  + const verticalSpaceSmall: Widget\n  + const verticalSpaceMedium: Widget\n  + const verticalSpaceLarge: Widget\n  + const verticalSpaceMassive: Widget\n  + const spacedDivider: Widget\n  + verticalSpace(height: double): Widget\n  + screenWidth(context: BuildContext): double\n  + screenHeight(context: BuildContext): double\n  + screenHeightFraction(context: BuildContext, dividedBy: int, offsetBy: double, max: double): double\n  + screenWidthFraction(context: BuildContext, dividedBy: int, offsetBy: double, max: double): double\n  + halfScreenWidth(context: BuildContext): double\n  + thirdScreenWidth(context: BuildContext): double\n  + quarterScreenWidth(context: BuildContext): double\n  + getResponsiveHorizontalSpaceMedium(context: BuildContext): double\n  + getResponsiveSmallFontSize(context: BuildContext): double\n  + getResponsiveMediumFontSize(context: BuildContext): double\n  + getResponsiveLargeFontSize(context: BuildContext): double\n  + getResponsiveExtraLargeFontSize(context: BuildContext): double\n  + getResponsiveMassiveFontSize(context: BuildContext): double\n  + getResponsiveFontSize(context: BuildContext, fontSize: double, max: double): double\n}\n@enduml",
      "methods": [
        {
          "name": "horizontalSpaceTiny",
          "description": "A constant Widget that provides a tiny horizontal space.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "verticalSpace",
          "description": "A function that creates a Widget with a specified vertical space.",
          "parameters": [
            "height"
          ],
          "return_type": "Widget"
        },
        {
          "name": "screenWidth",
          "description": "A function that returns the width of the screen.",
          "parameters": [
            "context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "A function that calculates a responsive font size based on the screen width.",
          "parameters": [
            "context",
            "fontSize",
            "max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "The NoticeSheet class is responsible for displaying a bottom sheet with a notice or alert message to the user. It is part of the UI layer of the application and is used to present important information or updates to the user in a modal dialog.",
      "class_diagram": "@startuml\n  class NoticeSheet {\n    + NoticeSheet({required this.completer, required this.request})\n    + Widget builder(BuildContext context, NoticeSheetModel viewModel, Widget? child)\n    + NoticeSheetModel viewModelBuilder(BuildContext context)\n  }\n\n  class NoticeSheetModel {\n    # NoticeSheetModel()\n  }\n\n  NoticeSheet --> NoticeSheetModel\n  @enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI of the NoticeSheet, which includes the title, description, and any other relevant content.",
          "parameters": [
            "BuildContext context",
            "NoticeSheetModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the NoticeSheetModel, which is used to manage the state and logic of the NoticeSheet.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This Dart file contains the `InfoAlertDialogModel` class, which is responsible for managing the state and behavior of an information alert dialog in a Flutter application.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel {\n}\nInfoAlertDialogModel -[hidden]- BaseViewModel\n@enduml",
      "methods": [
        {
          "name": "InfoAlertDialogModel",
          "description": "The constructor for the `InfoAlertDialogModel` class.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/app/app_viewmodel.dart",
      "description": "The AppViewModel class is responsible for managing the state and behavior of the main application view in a Flutter application. It serves as the ViewModel component in the Model-View-ViewModel (MVVM) architecture, which separates the presentation logic from the business logic.",
      "class_diagram": "@startuml\nclass AppViewModel extends BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_view.dart",
      "description": "The `HomeView` class is responsible for rendering the main UI of the application's home screen. It provides a simple interface for displaying a counter value and allowing the user to interact with the screen by incrementing the counter, showing a dialog, or displaying a bottom sheet.",
      "class_diagram": "@startuml\nclass HomeView {\n  +builder(BuildContext, HomeViewModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): HomeViewModel\n}\n\nclass HomeViewModel {\n  +incrementCounter(): void\n  +showDialog(): void\n  +showBottomSheet(): void\n  +counterLabel: String\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI of the home screen, including the counter display, increment button, dialog button, and bottom sheet button.",
          "parameters": [
            "BuildContext",
            "HomeViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the `HomeViewModel` to be used by the `HomeView`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "HomeViewModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "gap/gap.dart",
        "my_app/ui/views/home/home_viewmodel.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_viewmodel.dart",
      "description": "The HomeViewModel class is responsible for managing the state and behavior of the home screen in the application. It provides the core functionality for handling the counter value and displaying it, as well as providing methods to show a custom dialog and a bottom sheet.",
      "class_diagram": "@startuml\nclass HomeViewModel {\n  - _dialogService: DialogService\n  - _bottomSheetService: BottomSheetService\n  - _counter: int\n  + counterLabel: String\n  + incrementCounter(): void\n  + showDialog(): void\n  + showBottomSheet(): void\n}\n@enduml",
      "methods": [
        {
          "name": "counterLabel",
          "description": "Returns a string representation of the current counter value.",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "incrementCounter",
          "description": "Increments the counter value and rebuilds the UI.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Displays a custom dialog with a title and description.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Displays a custom bottom sheet with a title and description.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.bottomsheets.dart",
        "my_app/app/app.dialogs.dart",
        "my_app/app/app.locator.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_view.dart",
      "description": "The `StartupView` class in this file is responsible for the initial startup screen of the application. It is the main entry point for the user when they launch the app, displaying the app's logo and a loading indicator while the app's startup logic is being executed.",
      "class_diagram": "@startuml\nclass StartupView {\n  + builder(BuildContext, StartupViewModel, Widget?): Widget\n  + viewModelBuilder(BuildContext): StartupViewModel\n  + onViewModelReady(StartupViewModel): void\n}\n\nclass StartupViewModel {\n  + runStartupLogic(): void\n}\n\nStartupView --> StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the startup screen, displaying the app's logo and a loading indicator.",
          "parameters": [
            "BuildContext",
            "StartupViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the `StartupViewModel` to be used by the `StartupView`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "StartupViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Called when the `StartupViewModel` is ready, triggering the execution of the app's startup logic.",
          "parameters": [
            "StartupViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "flutter/scheduler.dart",
        "gap/gap.dart",
        "my_app/ui/views/startup/startup_viewmodel.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_viewmodel.dart",
      "description": "The StartupViewModel class is responsible for handling the initial startup logic of the application. It is responsible for delaying the application launch by a few seconds and then navigating to the home view, which is the main entry point of the application.",
      "class_diagram": "@startuml\n  class StartupViewModel {\n    -_navigationService : NavigationService\n    +runStartupLogic() : Future\n  }\n  @enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "This method is responsible for the core startup logic of the application. It delays the application launch by 3 seconds and then navigates to the home view using the NavigationService.",
          "parameters": [
            "None"
          ],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/app/app.router.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/config/production/firebase_options_production.dart",
      "description": "This file defines the Firebase configuration options for the production environment of the application. It is responsible for providing the necessary Firebase-related settings and credentials to integrate the application with the Firebase services in the production environment.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:firebase_core/firebase_core.dart",
        "lib/config/firebase_options.dart"
      ]
    },
    {
      "name": "lib/utils/const/const.dart",
      "description": "This file contains a set of constant values and data structures that are used throughout the application. It serves as a centralized repository for global configuration and settings, providing a consistent and easily accessible way to manage application-wide constants.",
      "class_diagram": "@startuml\n' Enumerations and Constants\npublicConstant totalOnboarding : int\npublicConstant onBoardingHeaderTag : String\npublicConstant pathCompliantStatement : String\npublicConstant pathTermsOfServices : String\npublicConstant defaultContactEmail : String\npublicConstant defaultContactPhone : String\npublicConstant introYoutubeId : String\npublicConstant defaultLanguagesList : List<Map<String, String>>\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/utils/contact/contact_util.dart",
      "description": "The `ContactUtil` class provides utility functions for launching WhatsApp and email communication from a Flutter application. It handles the platform-specific logic to open the appropriate communication channels for the user's device.",
      "class_diagram": "@startuml\nclass ContactUtil {\n  +static Future<void> launchWhatsApp(String phone, {String text = ''})\n  +static Future<void> launchEmail(String email)\n}\n@enduml",
      "methods": [
        {
          "name": "launchWhatsApp",
          "description": "Launches the WhatsApp application or the WhatsApp web interface with a pre-filled message and recipient phone number.",
          "parameters": [
            "phone",
            "text"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "launchEmail",
          "description": "Launches the default email application with the specified email address.",
          "parameters": [
            "email"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "dart:io",
        "package:url_launcher/url_launcher.dart"
      ]
    },
    {
      "name": "lib/utils/date/date_util.dart",
      "description": "The `DateUtil` class provides a set of utility functions for handling date and time data in the application, particularly when interacting with Firestore.",
      "class_diagram": "@startuml\nclass DateUtil {\n  + static DateTime? fromJson(dynamic value)\n}\n@enduml",
      "methods": [
        {
          "name": "fromJson",
          "description": "Extracts a `DateTime` object from a dynamic input value, which can be a `Timestamp` from Firestore, a `String` representation of a date and time, or a `DateTime` object directly.",
          "parameters": [
            "dynamic value"
          ],
          "return_type": "DateTime?"
        }
      ],
      "dependencies": [
        "cloud_firestore/cloud_firestore.dart"
      ]
    },
    {
      "name": "lib/utils/exceptions/api_exception.dart",
      "description": "This file defines a custom exception class `APIException` that is used to handle and propagate exceptions that occur during API service interactions. It provides a standardized way to handle and communicate errors that arise in the application's API layer.",
      "class_diagram": "@startuml\n  class APIException implements Exception {\n    -dynamic message\n    +toString(): String\n  }\n  @enduml",
      "methods": [
        {
          "name": "APIException",
          "description": "Constructor for the `APIException` class. Allows for the creation of a new `APIException` instance with an optional error message.",
          "parameters": [
            "message"
          ],
          "return_type": null
        },
        {
          "name": "toString",
          "description": "Overrides the default `toString()` method to provide a string representation of the `APIException` instance, including the runtime type and the error message.",
          "parameters": null,
          "return_type": "String"
        }
      ],
      "dependencies": [
        "dart:core"
      ]
    },
    {
      "name": "lib/utils/extensions/color_extension.dart",
      "description": "This Dart file provides a custom extension on the Flutter `Color` class, adding utility methods for converting hexadecimal color strings to `Color` objects and integer values. This extension simplifies the process of working with color-related functionality in the application, improving developer productivity and maintainability.",
      "class_diagram": "@startuml\nclass Color {\n  +static Color fromHex(String hexColorString)\n  +static int intFromHex(String hexColorString)\n}\n@enduml",
      "methods": [
        {
          "name": "fromHex",
          "description": "Converts a hexadecimal color string (e.g., '#FF0000' for red) to a `Color` object.",
          "parameters": [
            "hexColorString"
          ],
          "return_type": "Color"
        },
        {
          "name": "intFromHex",
          "description": "Converts a hexadecimal color string (e.g., '#FF0000' for red) to an integer value representing the color.",
          "parameters": [
            "hexColorString"
          ],
          "return_type": "int"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/utils/flavors/flavors.dart",
      "description": "This file defines a singleton class 'Flavors' that is responsible for managing the current application flavor, which is typically used to differentiate between development, staging, and production environments. The main purpose of this class is to provide a centralized way to access and check the current application flavor, enabling the application to behave differently based on the specific environment it is running in.",
      "class_diagram": "@startuml\nclass Flavors {\n  - static Flavor? flavor\n  + static bool get isDev()\n  + static bool get isProd()\n}\n@enduml",
      "methods": [
        {
          "name": "Flavors",
          "description": "Private constructor for the Flavors class, ensuring a singleton instance.",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "Flavors.factory",
          "description": "Factory constructor for the Flavors class, returning the singleton instance.",
          "parameters": null,
          "return_type": "Flavors"
        },
        {
          "name": "isDev",
          "description": "Getter that returns true if the current application flavor is Flavor.development.",
          "parameters": null,
          "return_type": "bool"
        },
        {
          "name": "isProd",
          "description": "Getter that returns true if the current application flavor is Flavor.production.",
          "parameters": null,
          "return_type": "bool"
        }
      ],
      "dependencies": [
        "my_app/models/enums/flavor.dart"
      ]
    },
    {
      "name": "lib/utils/json/json_util.dart",
      "description": "The JsonUtil class is responsible for providing utility functions to handle JSON data in the application. It solves the problem of safely and consistently parsing and formatting JSON data, which is a common task in modern web and mobile applications.",
      "class_diagram": "@startuml\nclass JsonUtil {\n  +static Map<String, dynamic> formatMap(Map<dynamic, dynamic>)\n  +static T? fromJsonOrNull<T>(dynamic, T Function(Map<String, dynamic>))\n  +static List<T> formatListMap<T>(List<dynamic>, T Function(Map<String, dynamic>))\n}\n@enduml",
      "methods": [
        {
          "name": "formatMap",
          "description": "Converts a Map<dynamic, dynamic> to a Map<String, dynamic> by removing any null keys.",
          "parameters": [
            "Map<dynamic, dynamic>"
          ],
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "fromJsonOrNull",
          "description": "Safely converts a dynamic JSON value to an instance of type T, or returns null if the input is invalid.",
          "parameters": [
            "dynamic",
            "T Function(Map<String, dynamic>)"
          ],
          "return_type": "T?"
        },
        {
          "name": "formatListMap",
          "description": "Converts a List<dynamic> of JSON objects to a List<T> by applying the given fromJson function to each object.",
          "parameters": [
            "List<dynamic>",
            "T Function(Map<String, dynamic>)"
          ],
          "return_type": "List<T>"
        }
      ],
      "dependencies": [
        "dart:core",
        "dart:collection"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "This file defines an InfoAlertDialog class, which is responsible for displaying an informative alert dialog with a title, description, and a confirmation button. The primary purpose of this class is to provide a reusable and customizable way to present important information to the user within the application.",
      "class_diagram": "@startuml\nclass InfoAlertDialog {\n  -DialogRequest request\n  -Function(DialogResponse) completer\n  +builder(BuildContext, InfoAlertDialogModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): InfoAlertDialogModel\n}\n\nclass InfoAlertDialogModel {\n}\n\nInfoAlertDialog *-- InfoAlertDialogModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "The main build method that constructs the UI for the InfoAlertDialog. It takes the DialogRequest, DialogResponse completer, and the view model as input and returns the final widget.",
          "parameters": [
            "BuildContext",
            "InfoAlertDialogModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "A method that creates and returns an instance of the InfoAlertDialogModel, which is used to manage the state and logic of the dialog.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog_model.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/config/development/firebase_options_development.dart",
      "description": "This Dart file is responsible for providing the configuration options for the Firebase service in the development environment of the application. It defines the necessary credentials and settings to initialize and interact with the Firebase platform during the development phase.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "firebase_core",
        "flutter_dotenv"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This file is responsible for setting up and managing the service locator in a Flutter application built using the Stacked architecture pattern. The service locator is a crucial component that allows different parts of the application to access and interact with various services and dependencies, promoting a modular and decoupled design.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method is responsible for registering the necessary services and dependencies with the service locator. It allows the application to access and use these services throughout the codebase.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/l10n/l10n.dart",
      "description": "Centralized localization and internationalization (i18n) configuration export file that provides standardized access to app localization resources and supported language configurations",
      "class_diagram": "@startuml\npackage Localization {\n    [app_localizations.dart]\n    [localizations_extension.dart]\n    [supported_locales.dart]\n}\n@enduml",
      "methods": [
        {
          "name": "exportLocalizations",
          "description": "Exports core localization components for unified language support across the application",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:flutter_gen/gen_l10n/app_localizations.dart",
        "localizations_extension.dart",
        "supported_locales.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This file is responsible for setting up and managing the dialog system used throughout the application. It defines the available dialog types, registers the custom dialog builders, and provides a centralized way to interact with the dialog service.",
      "class_diagram": "@startuml\n'Hide the stereotype since it is the default for class\n'hide circle\n'hide methods\n'skinparam classAttributeIconSize 0\n\nclass DialogType {\n  infoAlert\n}\n\nclass DialogBuilder {\n  (BuildContext, DialogRequest, DialogCompleter) => Widget\n}\n\nclass DialogService {\n  + registerCustomDialogBuilders(Map<DialogType, DialogBuilder>)\n}\n\n'Relationships\nDialogType *-- DialogBuilder : builds\nDialogService o-- DialogBuilder : uses\n\n@enduml",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "Configures the dialog service by registering the custom dialog builders for each dialog type.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/app/app_view.dart",
      "description": "The `AppView` class is the main entry point for the Flutter application. It is responsible for setting up the overall application structure, including the navigation, localization, and event handling. This class serves as the foundation for the entire application, providing the core functionality and user experience.",
      "class_diagram": "@startuml\nclass AppView {\n  +build(context, viewModel): Widget\n}\n\nclass _App {\n  +build(context, viewModel): Widget\n}\n\nAppView *-- _App\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the main application widget tree, including the MaterialApp, navigation, localization, and event handling.",
          "parameters": [
            "context",
            "viewModel"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/app/app.router.dart",
        "package:my_app/l10n/supported_locales.dart",
        "package:my_app/observer/screen_observer.dart",
        "package:my_app/ui/views/app/app_viewmodel.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/consultation/consultation_repository.dart",
      "description": "The ConsultationRepository class is responsible for managing the storage and retrieval of patient consultation data. It serves as the primary interface for interacting with the application's underlying database service to fetch, create, and update consultation records.",
      "class_diagram": "@startuml\nclass ConsultationRepository {\n  - _databaseService: DatabaseService\n  - _logger: Logger\n\n  + getConsultations(String patientId): Future<List<Consultation>>\n  + addConsultation(Consultation consultation): Future<void>\n}\n\nConsultationRepository --> DatabaseService\n@enduml",
      "methods": [
        {
          "name": "getConsultations",
          "description": "Retrieves a list of consultations for the specified patient ID from the database.",
          "parameters": [
            "String patientId"
          ],
          "return_type": "Future<List<Consultation>>"
        },
        {
          "name": "addConsultation",
          "description": "Adds a new consultation record to the database.",
          "parameters": [
            "Consultation consultation"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/models/consultation.dart",
        "my_app/services/database_service.dart",
        "logger/logger.dart"
      ]
    },
    {
      "name": "lib/features/auth/auth_repository.dart",
      "description": "The AuthRepository class is responsible for managing the authentication-related functionality of the application. It provides a unified interface for handling user login, logout, and checking authentication status, abstracting away the details of the underlying authentication service.",
      "class_diagram": "@startuml\nclass AuthRepository {\n  + Future<void> login(String email, String password)\n  + Future<void> logout()\n  + Future<bool> checkAuthStatus()\n  + bool get isAuthenticated\n  + String? get currentUserId\n}\n\nAuthRepository o-- AuthenticationService\n@enduml",
      "methods": [
        {
          "name": "login",
          "description": "Logs in a user with the provided email and password by delegating to the AuthenticationService.",
          "parameters": [
            "String email",
            "String password"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "logout",
          "description": "Logs out the current user by delegating to the AuthenticationService.",
          "parameters": [],
          "return_type": "Future<void>"
        },
        {
          "name": "checkAuthStatus",
          "description": "Checks the authentication status of the current user by delegating to the AuthenticationService.",
          "parameters": [],
          "return_type": "Future<bool>"
        },
        {
          "name": "isAuthenticated",
          "description": "Returns a boolean indicating whether the user is currently authenticated.",
          "parameters": [],
          "return_type": "bool"
        },
        {
          "name": "currentUserId",
          "description": "Returns the ID of the currently authenticated user, if any.",
          "parameters": [],
          "return_type": "String?"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/services/authentication_service.dart",
        "logger/logger.dart"
      ]
    },
    {
      "name": "lib/features/consultation/widgets/symptoms_input.dart",
      "description": "The SymptomsInput widget is responsible for providing a user interface for entering and displaying patient symptoms. It serves as a critical component in the consultation feature of the application, allowing users to input and manage symptom information related to a medical consultation.",
      "class_diagram": "@startuml\nclass SymptomsInput {\n  - Function(String) onSymptomsChanged\n  - String? initialValue\n  - String? error\n  + build(BuildContext): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the SymptomsInput widget, which includes a title, a CustomTextField for entering symptoms, and handles the onSymptomsChanged callback and error handling.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "my_app/ui/common/app_colors.dart",
        "my_app/widgets/custom_text_field.dart"
      ]
    },
    {
      "name": "lib/features/consultation/consultation_viewmodel.dart",
      "description": "The ConsultationViewModel class is responsible for managing the state and logic related to a patient consultation. It provides the core functionality to create and save a new consultation record, including the patient's symptoms, diagnosis, and prescription.",
      "class_diagram": "@startuml\nclass ConsultationViewModel {\n  -ConsultationRepository _consultationRepository\n  -NavigationService _navigationService\n  -Logger _logger\n  +Patient patient\n  -String? _symptoms\n  -String? _diagnosis\n  -String? _prescription\n  -String? _modelError\n\n  +String? get modelError\n  +void setSymptoms(String symptoms)\n  +void setDiagnosis(String diagnosis)\n  +void setPrescription(String prescription)\n  -bool _validateInputs()\n  +Future<void> saveConsultation()\n  +void onFutureError(error, Object? key)\n}\n@enduml",
      "methods": [
        {
          "name": "setSymptoms",
          "description": "Sets the patient's symptoms and notifies listeners of the change.",
          "parameters": [
            "String symptoms"
          ],
          "return_type": "void"
        },
        {
          "name": "setDiagnosis",
          "description": "Sets the patient's diagnosis and notifies listeners of the change.",
          "parameters": [
            "String diagnosis"
          ],
          "return_type": "void"
        },
        {
          "name": "setPrescription",
          "description": "Sets the patient's prescription and notifies listeners of the change.",
          "parameters": [
            "String prescription"
          ],
          "return_type": "void"
        },
        {
          "name": "_validateInputs",
          "description": "Validates the user's input for symptoms, diagnosis, and prescription. If any field is empty, it sets the _modelError and notifies listeners.",
          "parameters": null,
          "return_type": "bool"
        },
        {
          "name": "saveConsultation",
          "description": "Saves the new consultation record to the repository. It first validates the input, then creates a new Consultation object and adds it to the ConsultationRepository. If the save is successful, it navigates back to the previous screen. If an error occurs, it logs the error and sets the _modelError to notify the user.",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "onFutureError",
          "description": "Handles any errors that occur during asynchronous operations. It logs the error and sets the _modelError to notify the user.",
          "parameters": [
            "error",
            "Object? key"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:logger/logger.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/features/consultation/consultation_repository.dart",
        "package:my_app/models/consultation.dart",
        "package:my_app/models/patient.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/patients/patients_repository.dart",
      "description": "The PatientsRepository class is responsible for managing the CRUD (Create, Read, Update, Delete) operations for patient data. It acts as an intermediary between the application's user interface and the underlying database service, providing a consistent and abstracted API for interacting with patient records.",
      "class_diagram": "@startuml\nclass PatientsRepository {\n  +Future<List<Patient>> getPatients()\n  +Future<void> addPatient(Patient patient)\n  +Future<void> updatePatient(Patient patient)\n  +Future<void> deletePatient(String patientId)\n}\n\nPatientsRepository o-- DatabaseService\n@enduml",
      "methods": [
        {
          "name": "getPatients",
          "description": "Retrieves a list of all patients from the database.",
          "parameters": null,
          "return_type": "Future<List<Patient>>"
        },
        {
          "name": "addPatient",
          "description": "Adds a new patient record to the database.",
          "parameters": [
            "Patient patient"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "updatePatient",
          "description": "Updates an existing patient record in the database.",
          "parameters": [
            "Patient patient"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deletePatient",
          "description": "Removes a patient record from the database.",
          "parameters": [
            "String patientId"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/models/patient.dart",
        "my_app/services/database_service.dart",
        "logger/logger.dart"
      ]
    },
    {
      "name": "lib/features/patients/widgets/patient_card.dart",
      "description": "The `PatientCard` widget is responsible for rendering a card-style UI element that displays information about a patient. This widget is used throughout the application to provide a consistent visual representation of patient data, allowing users to quickly view and interact with patient records.",
      "class_diagram": "@startuml\nclass PatientCard {\n  -Patient patient\n  -VoidCallback onTap\n  +build(BuildContext context): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Constructs the UI for the PatientCard widget, including a circular avatar, the patient's name, age, gender, and contact number, as well as a chevron icon to indicate that the card is tappable.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "lib/models/patient.dart",
        "lib/ui/common/app_colors.dart"
      ]
    },
    {
      "name": "lib/features/patients/widgets/patient_list.dart",
      "description": "The PatientList widget is responsible for displaying a list of patient records in the application. It provides a reusable and configurable component for rendering the patient data in a consistent and visually appealing manner.",
      "class_diagram": "@startuml\nclass PatientList {\n  + List<Patient> patients\n  + Function(String) onPatientTap\n  + bool isLoading\n  + build(BuildContext): Widget\n}\nPatientList -down-> LoadingIndicator\nPatientList -down-> PatientCard\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the widget tree for the PatientList, handling different states such as loading, empty list, and the list of patient cards.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/models/patient.dart",
        "package:my_app/features/patients/widgets/patient_card.dart",
        "package:my_app/widgets/loading_indicator.dart"
      ]
    },
    {
      "name": "lib/features/patients/patients_viewmodel.dart",
      "description": "The PatientsViewModel is responsible for managing the state and functionality related to patients in the application. It is the central point of control for displaying a list of patients, filtering the list based on a search query, and navigating to the patient details view or the add patient view.",
      "class_diagram": "@startuml\nclass PatientsViewModel {\n  - _patientsRepository: PatientsRepository\n  - _navigationService: NavigationService\n  - _logger: Logger\n  - _patients: List<Patient>\n  - _modelError: String?\n  - _searchQuery: String\n  + patients: List<Patient>\n  + modelError: String?\n  + loadPatients(): Future<void>\n  + setSearchQuery(String query): void\n  + filteredPatients: List<Patient>\n  + navigateToAddPatient(): Future<void>\n  + navigateToPatientDetails(String patientId): Future<void>\n  + onFutureError(error, key): void\n}\n\nPatientsRepository --> PatientsViewModel\nNavigationService --> PatientsViewModel\nLogger --> PatientsViewModel\nPatient --> PatientsViewModel\n@enduml",
      "methods": [
        {
          "name": "loadPatients",
          "description": "Fetches the list of patients from the PatientsRepository and updates the _patients property.",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "setSearchQuery",
          "description": "Sets the _searchQuery property and notifies listeners of the change.",
          "parameters": [
            "String query"
          ],
          "return_type": "void"
        },
        {
          "name": "filteredPatients",
          "description": "Returns the list of patients that match the current search query.",
          "parameters": null,
          "return_type": "List<Patient>"
        },
        {
          "name": "navigateToAddPatient",
          "description": "Navigates to the AddPatientView and then refreshes the list of patients.",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "navigateToPatientDetails",
          "description": "Navigates to the PatientDetailsView with the provided patientId.",
          "parameters": [
            "String patientId"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "onFutureError",
          "description": "Handles errors that occur during asynchronous operations and updates the _modelError property accordingly.",
          "parameters": [
            "error",
            "Object? key"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:logger/logger.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/app/app.router.dart",
        "package:my_app/models/patient.dart",
        "package:my_app/features/patients/patients_repository.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/patient_details/patient_details_repository.dart",
      "description": "The PatientDetailsRepository class is responsible for managing the data and operations related to a patient's details, including fetching patient information, consultations, and performing CRUD (Create, Read, Update, Delete) operations on the patient data.",
      "class_diagram": "@startuml\nclass PatientDetailsRepository {\n  +Future<Patient> getPatientDetails(String patientId)\n  +Future<List<Consultation>> getPatientConsultations(String patientId)\n  +Future<void> updatePatient(Patient patient)\n  +Future<void> deletePatient(String patientId)\n}\n\nPatientDetailsRepository o-- DatabaseService\n@enduml",
      "methods": [
        {
          "name": "getPatientDetails",
          "description": "Retrieves the details of a patient based on the provided patient ID.",
          "parameters": [
            "String patientId"
          ],
          "return_type": "Future<Patient>"
        },
        {
          "name": "getPatientConsultations",
          "description": "Retrieves the list of consultations for a patient based on the provided patient ID.",
          "parameters": [
            "String patientId"
          ],
          "return_type": "Future<List<Consultation>>"
        },
        {
          "name": "updatePatient",
          "description": "Updates the details of a patient.",
          "parameters": [
            "Patient patient"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deletePatient",
          "description": "Deletes a patient based on the provided patient ID.",
          "parameters": [
            "String patientId"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:logger/logger.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/models/consultation.dart",
        "package:my_app/models/patient.dart",
        "package:my_app/services/database_service.dart"
      ]
    },
    {
      "name": "lib/features/patient_details/patient_details_viewmodel.dart",
      "description": "The PatientDetailsViewModel is responsible for managing the state and functionality related to displaying the details of a patient, including their personal information and consultation history. It provides the necessary data and business logic to the UI layer, allowing the application to present a comprehensive view of a patient's medical information.",
      "class_diagram": "@startuml\nclass PatientDetailsViewModel {\n  + Patient? patient\n  + List<Consultation> consultations\n  + String? modelError\n  + Future<void> loadPatientDetails()\n  + Future<void> navigateToNewConsultation()\n  + Future<void> deletePatient()\n}\n\nclass PatientDetailsRepository {\n  + Future<Patient> getPatientDetails(String patientId)\n  + Future<List<Consultation>> getPatientConsultations(String patientId)\n  + Future<void> deletePatient(String patientId)\n}\n\nclass NavigationService {\n  + Future<dynamic> navigateTo(String route, {dynamic arguments})\n  + Future<dynamic> back()\n}\n\nclass DialogService {\n  + Future<DialogResponse?> showDialog({String? title, String? description, String? buttonTitle, String? cancelTitle})\n}\n\nPatientDetailsViewModel o-- PatientDetailsRepository\nPatientDetailsViewModel o-- NavigationService\nPatientDetailsViewModel o-- DialogService\n@enduml",
      "methods": [
        {
          "name": "loadPatientDetails",
          "description": "Fetches the patient details and consultation history from the PatientDetailsRepository, updates the view model's state, and notifies the UI of the changes.",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "navigateToNewConsultation",
          "description": "Navigates to the consultation view screen, passing the patient object as an argument. Refreshes the patient details after a new consultation is created.",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "deletePatient",
          "description": "Displays a confirmation dialog to the user, and if confirmed, deletes the patient from the system by calling the deletePatient method in the PatientDetailsRepository. Navigates back to the previous screen after the deletion is complete.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "logger/logger.dart",
        "my_app/app/app.locator.dart",
        "my_app/app/app.router.dart",
        "my_app/models/consultation.dart",
        "my_app/models/patient.dart",
        "my_app/features/patient_details/patient_details_repository.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/patient_details/widgets/consultation_history.dart",
      "description": "The `ConsultationHistory` widget is responsible for displaying the consultation history of a patient. It retrieves a list of `Consultation` objects and presents them in an expandable UI, allowing the user to view the details of each consultation.",
      "class_diagram": "@startuml\nclass ConsultationHistory {\n  -List<Consultation> consultations\n  +build(context): Widget\n  -_buildSection(title, content): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the `ConsultationHistory` widget, which includes a list of consultation cards with expandable content.",
          "parameters": [
            "context"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_buildSection",
          "description": "Builds a UI section for a specific aspect of a consultation (e.g., symptoms, diagnosis, prescription, notes).",
          "parameters": [
            "title",
            "content"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:intl/intl.dart",
        "package:my_app/models/consultation.dart",
        "package:my_app/ui/common/app_colors.dart"
      ]
    },
    {
      "name": "lib/models/consultation.dart",
      "description": "The `Consultation` class represents a medical consultation record, including information about the patient, symptoms, diagnosis, prescription, and the doctor who performed the consultation. This class provides a data model for managing and storing consultation-related data in the application.",
      "class_diagram": "@startuml\nclass Consultation {\n  +String id\n  +String patientId\n  +String symptoms\n  +String diagnosis\n  +String prescription\n  +DateTime consultationDate\n  +String doctorId\n  +String? notes\n  +Consultation.fromJson(Map<String, dynamic> json)\n  +Map<String, dynamic> toJson()\n  +Consultation copyWith({...})\n}\n@enduml",
      "methods": [
        {
          "name": "Consultation.fromJson",
          "description": "Factory constructor that creates a `Consultation` instance from a JSON map.",
          "parameters": [
            "Map<String, dynamic> json"
          ],
          "return_type": "Consultation"
        },
        {
          "name": "toJson",
          "description": "Converts the `Consultation` instance to a JSON map.",
          "parameters": null,
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "copyWith",
          "description": "Returns a new `Consultation` instance with the specified properties updated.",
          "parameters": [
            "String? id",
            "String? patientId",
            "String? symptoms",
            "String? diagnosis",
            "String? prescription",
            "DateTime? consultationDate",
            "String? doctorId",
            "String? notes"
          ],
          "return_type": "Consultation"
        }
      ],
      "dependencies": [
        "equatable"
      ]
    },
    {
      "name": "lib/features/patients/patients_view.dart",
      "description": "The `PatientsView` class is the main screen for displaying and managing patient information in the application. It is responsible for providing a user interface for searching, listing, and navigating to patient details. The class integrates with the `PatientsViewModel` to handle the business logic and data management related to patients.",
      "class_diagram": "@startuml\nclass PatientsView {\n  +builder()\n  +viewModelBuilder()\n  +onViewModelReady()\n}\n\nclass PatientsViewModel {\n  +loadPatients()\n  +setSearchQuery()\n  +navigateToAddPatient()\n  +navigateToPatientDetails()\n  +filteredPatients\n  +modelError\n  +isBusy\n}\n\nPatientsView *-- PatientsViewModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the `PatientsView` by creating a `Scaffold` with an app bar, search functionality, and a list of patients.",
          "parameters": [
            "BuildContext",
            "PatientsViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Instantiates a new `PatientsViewModel` instance, which provides the business logic for the patients feature.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "PatientsViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Triggers the initial loading of patients when the `PatientsView` is ready.",
          "parameters": [
            "PatientsViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/features/patients/patients_viewmodel.dart",
        "package:my_app/features/patients/widgets/patient_list.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/widgets/custom_text_field.dart",
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/models/diagnosis.dart",
      "description": "The Diagnosis class represents a medical diagnosis made during a consultation. It encapsulates the key information about a diagnosis, including the condition, symptoms, and the date the diagnosis was made. This class provides a standardized way to manage and share diagnosis data across the application.",
      "class_diagram": "@startuml\nclass Diagnosis {\n  +String id\n  +String consultationId\n  +String condition\n  +String description\n  +List<String> symptoms\n  +DateTime diagnosisDate\n  +Diagnosis.fromJson(Map<String, dynamic> json)\n  +Map<String, dynamic> toJson()\n  +Diagnosis copyWith({...})\n}\n@enduml",
      "methods": [
        {
          "name": "Diagnosis",
          "description": "Constructor that initializes the diagnosis with the required properties.",
          "parameters": [
            "id",
            "consultationId",
            "condition",
            "description",
            "symptoms",
            "diagnosisDate"
          ],
          "return_type": "Diagnosis"
        },
        {
          "name": "fromJson",
          "description": "Factory constructor that creates a Diagnosis instance from a JSON map.",
          "parameters": [
            "Map<String, dynamic> json"
          ],
          "return_type": "Diagnosis"
        },
        {
          "name": "toJson",
          "description": "Converts the Diagnosis instance to a JSON map.",
          "parameters": null,
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "copyWith",
          "description": "Creates a new Diagnosis instance with the specified changes.",
          "parameters": [
            "id",
            "consultationId",
            "condition",
            "description",
            "symptoms",
            "diagnosisDate"
          ],
          "return_type": "Diagnosis"
        }
      ],
      "dependencies": [
        "package:equatable/equatable.dart"
      ]
    },
    {
      "name": "lib/features/auth/auth_view.dart",
      "description": "The `AuthView` class is responsible for rendering the user interface for the authentication flow of the application. It provides a visual representation of the login process, allowing users to enter their email and password credentials, and initiates the login process when the user clicks the 'Login' button.",
      "class_diagram": "@startuml\nclass AuthView {\n  + builder(BuildContext, AuthViewModel, Widget): Widget\n  + viewModelBuilder(BuildContext): AuthViewModel\n}\n\nclass AuthViewModel {\n  + setEmail(String): void\n  + setPassword(String): void\n  + login(): Future<void>\n  + isBusy: bool\n  + modelError: String?\n}\n\nAuthView *-- AuthViewModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the AuthView, including text fields for email and password, a login button, and any error messages. It also binds the view to the AuthViewModel, allowing the view to interact with the view model's logic.",
          "parameters": [
            "BuildContext",
            "AuthViewModel",
            "Widget"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the AuthViewModel to be used by the AuthView.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "AuthViewModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/features/auth/auth_viewmodel.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/widgets/custom_button.dart",
        "package:my_app/widgets/custom_text_field.dart",
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/services/authentication_service.dart",
      "description": "The AuthenticationService is responsible for handling user authentication, including login, logout, and checking the authentication status. It provides a centralized and reusable mechanism for managing the application's authentication state and workflow.",
      "class_diagram": "@startuml\nclass AuthenticationService {\n  - _logger: Logger\n  - _currentUserId: String\n  - _isAuthenticated: bool\n  \n  + get isAuthenticated(): bool\n  + get currentUserId(): String\n  \n  + init(): Future<void>\n  + login(email: String, password: String): Future<void>\n  + logout(): Future<void>\n  + checkAuthStatus(): Future<bool>\n}\n\nAuthenticationService ..|> InitializableDependency\n@enduml",
      "methods": [
        {
          "name": "init",
          "description": "Initializes the authentication service by setting up the initial authentication state.",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "login",
          "description": "Handles the user login process, updating the authentication state accordingly.",
          "parameters": [
            "email: String",
            "password: String"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "logout",
          "description": "Handles the user logout process, updating the authentication state accordingly.",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "checkAuthStatus",
          "description": "Checks the current authentication status of the user.",
          "parameters": null,
          "return_type": "Future<bool>"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:logger/logger.dart"
      ]
    },
    {
      "name": "lib/services/database_service.dart",
      "description": "The DatabaseService class is responsible for managing the application's patient and consultation data. It provides a simulated database that allows the application to perform CRUD (Create, Read, Update, Delete) operations on patient and consultation records.",
      "class_diagram": "@startuml\nclass DatabaseService {\n  - _logger: Logger\n  - _patients: Map<String, Patient>\n  - _consultations: Map<String, List<Consultation>>\n\n  + getPatients(): Future<List<Patient>>\n  + getPatient(String id): Future<Patient>\n  + addPatient(Patient patient): Future<void>\n  + getConsultations(String patientId): Future<List<Consultation>>\n  + addConsultation(Consultation consultation): Future<void>\n  + updatePatient(Patient patient): Future<void>\n  + deletePatient(String patientId): Future<void>\n}\n@enduml",
      "methods": [
        {
          "name": "getPatients",
          "description": "Retrieves a list of all patients.",
          "parameters": null,
          "return_type": "Future<List<Patient>>"
        },
        {
          "name": "getPatient",
          "description": "Retrieves a specific patient by their ID.",
          "parameters": [
            "String id"
          ],
          "return_type": "Future<Patient>"
        },
        {
          "name": "addPatient",
          "description": "Adds a new patient to the database.",
          "parameters": [
            "Patient patient"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "getConsultations",
          "description": "Retrieves a list of consultations for a specific patient.",
          "parameters": [
            "String patientId"
          ],
          "return_type": "Future<List<Consultation>>"
        },
        {
          "name": "addConsultation",
          "description": "Adds a new consultation for a patient.",
          "parameters": [
            "Consultation consultation"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "updatePatient",
          "description": "Updates an existing patient's information.",
          "parameters": [
            "Patient patient"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deletePatient",
          "description": "Deletes a patient and their associated consultations from the database.",
          "parameters": [
            "String patientId"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:logger/logger.dart",
        "package:my_app/models/consultation.dart",
        "package:my_app/models/patient.dart"
      ]
    },
    {
      "name": "lib/widgets/custom_button.dart",
      "description": "This file defines a custom, reusable button widget for a Flutter application. The button can be styled as a primary, secondary, or text button, and supports loading states and optional icons.",
      "class_diagram": "@startuml\nclass CustomButton {\n  +String text\n  +VoidCallback onPressed\n  +ButtonType type\n  +bool isLoading\n  +bool isFullWidth\n  +IconData? icon\n  +build(BuildContext): Widget\n}\n\nclass _PrimaryButton {\n  +String text\n  +VoidCallback onPressed\n  +bool isLoading\n  +bool isFullWidth\n  +IconData? icon\n  +build(BuildContext): Widget\n}\n\nclass _SecondaryButton {\n  +String text\n  +VoidCallback onPressed\n  +bool isLoading\n  +bool isFullWidth\n  +IconData? icon\n  +build(BuildContext): Widget\n}\n\nclass _TextButton {\n  +String text\n  +VoidCallback onPressed\n  +bool isLoading\n  +IconData? icon\n  +build(BuildContext): Widget\n}\n\nclass _ButtonContent {\n  +String text\n  +bool isLoading\n  +IconData? icon\n  +Color color\n  +build(BuildContext): Widget\n}\n\nCustomButton --> _PrimaryButton\nCustomButton --> _SecondaryButton\nCustomButton --> _TextButton\n_PrimaryButton --> _ButtonContent\n_SecondaryButton --> _ButtonContent\n_TextButton --> _ButtonContent\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the appropriate button widget based on the specified type (primary, secondary, or text).",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/common/app_colors.dart"
      ]
    },
    {
      "name": "lib/widgets/custom_text_field.dart",
      "description": "This Dart file contains a custom text field widget that provides a reusable and customizable input field with various features and options. It is designed to simplify the implementation of text input components in a Flutter application, ensuring consistent styling and functionality across different parts of the UI.",
      "class_diagram": "@startuml\nclass CustomTextField extends StatelessWidget {\n  -String label\n  -String? hint\n  -TextEditingController? controller\n  -String? Function(String?)? validator\n  -TextInputType? keyboardType\n  -bool obscureText\n  -int? maxLines\n  -int? maxLength\n  -Widget? prefix\n  -Widget? suffix\n  -List<TextInputFormatter>? inputFormatters\n  -void Function(String)? onChanged\n  -VoidCallback? onTap\n  -bool readOnly\n  -String? errorText\n  -bool autofocus\n  -FocusNode? focusNode\n  -TextInputAction? textInputAction\n  -void Function(String)? onFieldSubmitted\n\n  +Widget build(BuildContext)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the custom text field widget based on the provided configuration options.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "flutter/services.dart",
        "my_app/ui/common/app_colors.dart"
      ]
    },
    {
      "name": "lib/features/consultation/widgets/diagnosis_form.dart",
      "description": "The DiagnosisForm widget is responsible for rendering a form that allows users to input and update a medical diagnosis. It provides a customizable text field with a label, hint, and error handling to capture the diagnosis details.",
      "class_diagram": "@startuml\nclass DiagnosisForm {\n  -Function(String) onDiagnosisChanged\n  -String? initialValue\n  -String? error\n  +build(BuildContext context): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the DiagnosisForm widget, which includes a custom text field for entering the medical diagnosis and a title/icon for the form.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/widgets/custom_text_field.dart"
      ]
    },
    {
      "name": "lib/widgets/loading_indicator.dart",
      "description": "This file defines a custom loading indicator widget that can be used throughout the application to display a loading state. It provides a simple and consistent way to show a loading spinner along with an optional message.",
      "class_diagram": "@startuml\nclass LoadingIndicator extends StatelessWidget {\n  -double size\n  -Color? color\n  -String? message\n  +Widget build(BuildContext context)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the widget tree for the loading indicator, including the circular progress indicator and an optional message text.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/common/app_colors.dart"
      ]
    },
    {
      "name": "lib/features/consultation/widgets/prescription_input.dart",
      "description": "A reusable Flutter widget for capturing prescription details in a medical consultation interface, providing a structured input field for medication information with validation and visual styling",
      "class_diagram": "@startuml\nclass PrescriptionInput {\n  +onPrescriptionChanged: Function(String)\n  +initialValue: String?\n  +error: String?\n  +build(context): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Renders a stylized prescription input container with an icon, title, and multi-line text field for medication details",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "my_app/ui/common/app_colors.dart",
        "my_app/widgets/custom_text_field.dart"
      ]
    },
    {
      "name": "lib/features/consultation/consultation_view.dart",
      "description": "A Flutter view for creating and managing medical consultations, allowing healthcare professionals to record patient symptoms, diagnosis, and prescriptions in a structured workflow",
      "class_diagram": "@startuml\nclass ConsultationView {\n  - Patient patient\n  + builder()\n  + viewModelBuilder()\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Constructs the UI for a medical consultation, displaying patient details and input sections for symptoms, diagnosis, and prescription",
          "parameters": [
            "BuildContext",
            "ConsultationViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates the ViewModel associated with the consultation, initializing it with the current patient",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "ConsultationViewModel"
        },
        {
          "name": "saveConsultation",
          "description": "Triggers the saving of a complete medical consultation, consolidating all entered medical information",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "consultation_viewmodel.dart",
        "widgets/diagnosis_form.dart",
        "widgets/prescription_input.dart",
        "widgets/symptoms_input.dart",
        "models/patient.dart"
      ]
    },
    {
      "name": "lib/features/auth/auth_viewmodel.dart",
      "description": "Authentication view model responsible for managing user login/logout processes, input validation, and navigation in a Flutter application using the Stacked architecture pattern",
      "class_diagram": "@startuml\nclass AuthViewModel {\n  - _authRepository: AuthRepository\n  - _navigationService: NavigationService\n  - _logger: Logger\n  + login(): void\n  + logout(): void\n  + setEmail(email: String): void\n  + setPassword(password: String): void\n}\n@enduml",
      "methods": [
        {
          "name": "login",
          "description": "Validates user credentials and initiates login process, navigating to home view on success",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "logout",
          "description": "Logs out the current user and navigates back to login view",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "setEmail",
          "description": "Sets the email input for authentication, trimming whitespace",
          "parameters": [
            "email"
          ],
          "return_type": "void"
        },
        {
          "name": "setPassword",
          "description": "Sets the password input for authentication",
          "parameters": [
            "password"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "logger/logger.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "my_app/features/auth/auth_repository.dart"
      ]
    },
    {
      "name": "lib/models/patient.dart",
      "description": "The `Patient` class in this file represents a patient in a healthcare application. It encapsulates the core information about a patient, including their personal details, medical history, and timestamps for when the patient record was created and last updated.",
      "class_diagram": "@startuml\nclass Patient {\n  -String id\n  -String name\n  -int age\n  -String gender\n  -String contactNumber\n  -String? medicalHistory\n  -DateTime createdAt\n  -DateTime updatedAt\n  +Patient.fromJson(Map<String, dynamic> json)\n  +Map<String, dynamic> toJson()\n  +Patient copyWith({...})\n}\n@enduml",
      "methods": [
        {
          "name": "Patient.fromJson",
          "description": "Constructs a `Patient` instance from a JSON map, deserializing the data into the appropriate fields.",
          "parameters": [
            "Map<String, dynamic> json"
          ],
          "return_type": "Patient"
        },
        {
          "name": "toJson",
          "description": "Serializes the `Patient` instance into a JSON map, with the fields represented as key-value pairs.",
          "parameters": null,
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "copyWith",
          "description": "Creates a new `Patient` instance with one or more fields updated, allowing for easy modification of an existing patient record.",
          "parameters": [
            "String? id",
            "String? name",
            "int? age",
            "String? gender",
            "String? contactNumber",
            "String? medicalHistory",
            "DateTime? createdAt",
            "DateTime? updatedAt"
          ],
          "return_type": "Patient"
        }
      ],
      "dependencies": [
        "package:equatable/equatable.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_theme.dart",
      "description": "This file defines the app-wide theme and styling for the Flutter application. It provides a consistent visual experience across all UI components by defining the colors, typography, and other design elements used throughout the app.",
      "class_diagram": "@startuml\nclass AppTheme {\n  +static lightTheme: ThemeData\n}\n@enduml",
      "methods": [
        {
          "name": "lightTheme",
          "description": "Defines the light theme settings for the app, including primary and secondary colors, scaffold background, app bar styling, card styling, input fields, and button styles.",
          "parameters": null,
          "return_type": "ThemeData"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "lib/ui/common/app_colors.dart"
      ]
    },
    {
      "name": "lib/features/patient_details/patient_details_view.dart",
      "description": "The PatientDetailsView class is responsible for displaying the details of a patient, including their personal information, medical history, and consultation history. It serves as the main user interface for the patient details feature, allowing users to view and manage a patient's information.",
      "class_diagram": "@startuml\nclass PatientDetailsView {\n  + String patientId\n  + builder(BuildContext, PatientDetailsViewModel, Widget?)\n  + _buildContent(BuildContext, PatientDetailsViewModel)\n  + _buildInfoRow(IconData, String)\n  + viewModelBuilder(BuildContext): PatientDetailsViewModel\n  + onViewModelReady(PatientDetailsViewModel)\n}\n\nclass PatientDetailsViewModel {\n  - patient: Patient\n  - consultations: List<Consultation>\n  - modelError: String?\n  + loadPatientDetails()\n  + deletePatient()\n  + navigateToNewConsultation()\n}\n\nclass Patient {\n  + String name\n  + int age\n  + String gender\n  + String contactNumber\n  + String? medicalHistory\n}\n\nclass Consultation {\n  + DateTime date\n  + String notes\n}\n\nPatientDetailsView --> PatientDetailsViewModel\nPatientDetailsViewModel --> Patient\nPatientDetailsViewModel --> Consultation\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the main content of the PatientDetailsView, including the app bar, body, and floating action button.",
          "parameters": [
            "BuildContext",
            "PatientDetailsViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_buildContent",
          "description": "Constructs the main content of the view, including the patient's details and consultation history.",
          "parameters": [
            "BuildContext",
            "PatientDetailsViewModel"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_buildInfoRow",
          "description": "Builds a row with an icon and text to display a piece of patient information.",
          "parameters": [
            "IconData",
            "String"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Constructs the PatientDetailsViewModel instance, passing the patientId as a parameter.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "PatientDetailsViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Calls the loadPatientDetails method on the PatientDetailsViewModel when the view is ready.",
          "parameters": [
            "PatientDetailsViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/features/patient_details/patient_details_viewmodel.dart",
        "package:my_app/features/patient_details/widgets/consultation_history.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/widgets/custom_button.dart",
        "package:my_app/widgets/loading_indicator.dart",
        "package:stacked/stacked.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant AppView\nparticipant AuthView\nparticipant AuthViewModel\nparticipant PatientsView\nparticipant PatientsViewModel\nparticipant PatientDetailsView\nparticipant PatientDetailsViewModel\nparticipant ConsultationView\nparticipant ConsultationViewModel\n\nUser -> main: Launch app\nmain -> AppView: Create and run\nAppView -> AuthView: Initialize\nAuthView -> AuthViewModel: Handle login\nAuthViewModel -> PatientsView: Navigate on successful login\nPatientsView -> PatientsViewModel: Load patients\nPatientsView -> User: Display patient list\nUser -> PatientsView: Select patient\nPatientsView -> PatientDetailsView: Navigate to patient details\nPatientDetailsView -> PatientDetailsViewModel: Load patient details\nPatientDetailsView -> User: Display patient details\nUser -> PatientDetailsView: Start new consultation\nPatientDetailsView -> ConsultationView: Navigate to consultation\nConsultationView -> ConsultationViewModel: Initialize with patient\nUser -> ConsultationView: Enter consultation details\nConsultationView -> ConsultationViewModel: Save consultation\nConsultationViewModel -> PatientsView: Navigate back to patients list\n@enduml",
  "state_management_flow": "The application uses the Stacked architecture for state management, with each view having a corresponding ViewModel that handles the business logic and state for that view. The ViewModels are responsible for updating the UI, interacting with services (e.g., DatabaseService, AuthenticationService), and managing the application's overall state. The app.locator.dart file sets up the necessary dependency injections, allowing the ViewModels to access the required services.",
  "navigation_flow": "The application's navigation is managed using the Stacked Router, defined in app.router.dart. The main entry point is the AppView, which initializes the Stacked architecture and displays the AuthView for user authentication. After a successful login, the user is navigated to the PatientsView, where they can view the list of patients. From the PatientsView, the user can navigate to the PatientDetailsView to view the details of a specific patient, and from there, they can start a new consultation by navigating to the ConsultationView."
}